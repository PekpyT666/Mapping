//===========================================================================================//
//------------------------------ Resources for your custommap: ------------------------------//
//===========================================================================================//

//Store your resources in a folder with the same name as the custommap.
//You can store all your resources in this folder. But you can also (optionally) made in it a subfolders for specific filetypes or however you prefer to organize your files (note , you need to use normal "/" and NOT a windows "\").

//"Sprites" is a fancy word for "images". Their supported file format is ".png".
//If you need sprite with multiple images in it then you need to make "strip" - this means that you need to arrange all your individual frames horizontally inside one ".png" file.
    //As example here is a "e_sprite" usage -
    //If your custommap named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then image file "my_test.png" should have path "%LocalAppdata%/delirium/maps/my_map/my_test.png", and "e_sprite" properties should have "my_test" value in it.

//Supported sounds format is ".ogg". If your sound isn't in ".ogg" format, then you need a file converter (you can find many online or use some programms). You CAN'T just manually change file extension!
    //As example here is a "e_sound" usage -
    //If your custommap named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then sound file "my_test.ogg" should have path "%LocalAppdata%/delirium/maps/my_map/my_test.ogg", and "e_sound" properties should have "my_test" value in it.

//Supported text format is ".txt".
    //As example here is a "e_text_file" usage -
    //If your custommap named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then text file "my_test.txt" should have path "%LocalAppdata%/delirium/maps/my_map/my_test.txt", and "e_text_file" properties should have "my_test" value in it.

//There is also prefabs rosources. Basically this is a custommaps that you can spawn inside your main custommap. 
//They should have "!prefab" prefix in the begining of their name and have ".tmj" file format.
//You can read more about them in Entity Prefaber notes and properties descriptions.
    //As example here is a "e_pref_file" usage -
    //If your custommap named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then prefab "!prefab_my_test.tmj" should have path "%LocalAppdata%/delirium/maps/my_map/!prefab_my_test.tmj", and "e_prefab_file" property should have "!prefab_my_test" value in it.


//===========================================================================================//
//---------------------------------------- Entities: ----------------------------------------//
//===========================================================================================//

//-------------------- Entity Activator (ent_activator) --------------------//
{
    //@brief - Used when you need to activate other entity. In most cases you will use it as simpliest entity with e_delay.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Active Area (ent_forceload_area) --------------------//
{
    //@brief - Used when you need to mark all objects (commonly non-entities) in specific zone to be processed by game in next frame (thats otherwise would not be processed by game due to optimization system).
    //@shape - always rectangular
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // (true by default) current entity activation ("true" if must activate on start)
    "e_disable"         (bool)          // deactivate entity after performing activation
        // Notes - Commonly, you don't need to use this entity, unless you build something really big (more than thousands of entities) or complex (like moving/checking/programming/deleting non-entity objects)!
        // If you feel that you map is slowed down due to thousands of entities and you want to optimize it, please consider to look at "Entity Prefaber" first. You can still use combination of "Entity Active Area" and "unload_entities"==true, but "Entity Prefaber" is a much more elegant and efficient way to unload/load your mechanisms on runtime (since you control when entiites/objects from prefab should appear and dissapear in game while optimization system do it work every tick). 
        // 
        // D' have something like occlusion culling plus mobs loading/unloading in minecraft chunks. This optimization system automatically keep needed objects loaded, and unload anything else. And this entity exist to give mapmaker ability to manipulate this system.
        // Basically this is work like this - on start of each frame game update what objects are loaded - i.e. should execute their code and draw their stuf. Unloaded object stored in RAM but didn't do almost anything, it's reduced ~95% of their impact on fps, since they are no more exist in the game in a normal form.
        // Here is list of objects that are always loaded each frame: game cores, anything on screen, all projectiles, monsters that chase player, anything close enoght to loaded monsters and projectiles(64 pixel radius), obj_Player, obj_NPC, obj_interact_personalHeart, obj_nightmarishMass, obj_gib, obj_gear, obj_light_custom, and obj_portalOut.
        // And then game have two option - load all entities (global variable "unload_entities" = "false") or load only ent_forceload_area (global variable "unload_entities" = true).
        // And finally, no matter what option is, game will load anything located inside activated ent_forceload_area.
        // To visualize this process you can save debug wrap(screenshot) of whole level with only loaded objects. You need to press Ctrl+Shift+F11 (besides displaying on screen this will save wrap in to %LocalAppdata%\delirium). Try to look on such wraps in story and custom maps.
        // It is also worth mention that game optimization unloads entities/objects pretty fast, but game engine still perform some needed code on them every tick even in unloaded state, this is a remaining ~5% of fps impact mentioned earlier (i.e. on your map you CAN'T infinetely create entities/objects and leve them to be unloaded by oprimization system. They still will slowly drain game fps).
        // While "Entity Prefaber" work slower than game optimization, but it stored unloaded entities/objects as JSON string inside prefabs, thus game engine didn't do anything with them inside prefabs, they just lay in RAM or on disk (i.e. you CAN AND SHOULD create and unload in to prefab entities/objects if you want to infinetely do something on your map. Prefabs didn't do anything to game fps while they are unused, it's just a string in RAM or file on disk).
}

//-------------------- Entity Active Type (ent_forceload_type) --------------------//
{
    //@brief - Used when you need to mark all objects (commonly non-entities) of the specific type to be processed by game in next frame (thats otherwise would not be processed by game due to optimization system).
    //@shape - always point
    
    "e_name"            (string)  // current entity name
    "e_tag"             (string)  // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)    // current entity activation ("true" if must activate on start)
    "e_forceload_type"  (string)  // Type of object which all instances will be forceloaded
    "e_disable"         (bool)    // deactivate entity after performing activation
        // Note - Don't use it on entities, they are forceloaded by default(unless unload_entities global is true)! And in general, don't use this entity unless you really need to keep specific type of objects always active.
        // Always active objects can be accessed by entities even when they are too far from camera/player/projectiles/etc(read more in "Entity Active Area" notes), but in the same time always active objects can give a massive impact on FPS. Try your best to use it for a few frames or for objects that count are low on level.
        // This entity is similar to "Entity Active Area" ("ent_forceload_area") but instead of keeping anything active in some area, this entity work with all level instances of the specific object type.
        // As example of usage - in the story mode on graveyard crypt when all normal monsters dissapears, it's actually this entity forceloaded all monsters, before "Entity Destroyer" destroy them all. Without it, destroyer could destroy only those monsters that are close enough to player/camera, but not those that are in other map end.
}

//-------------------- Entity Breakable (ent_breakable) --------------------//
{
    //@shape - always point

    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_sprite"              (string)        // current entity sprite
    "e_sprite_remback"      (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"       (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"           (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"           (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"       (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"       (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"        (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"        (color || int)  // current entity color
    "e_sprite_frames"       (int)           // number of images in current sprite
    "e_sprite_image"        (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"         (float)         // animation speed
    "e_mask"                (string)        // collision mask for current entity
    "e_mask_ox"             (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"             (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"        (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_depth"               (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_solid_type"          (int)           // sets collision for entity ("0" // no collision, "1" // projectiles can pass, "2" // full solid)
    "e_allowmonsters"       (bool)          // allows monsters to activate entity
    "e_allownpc"            (bool)          // allows NPC to activate entity
    "e_allowplayer"         (bool)          // allows player to activate entity
    "e_allowtele"           (bool)          // allows teleportation ball to activate entity
    "e_collision"           (bool)          // destroy projectiles on collision (if "e_shooter" is "true")
    "e_collied_only_ranged" (bool)          // if false then melee projectiles can simultaneously activate entity and hit nearby monster before been marked as "collieded" (if "e_collision" is "true")
    "e_inspector"           (string)        // entity name that will be displayed on the inspector
    "e_shadow"              (bool)          // allow entity to cast a shadow
    "e_shadow_bot"          (bool)          // sets shadow to cast from bottom side
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Button (ent_button) --------------------//
{
    //@brief - Used when you need to detect that player pressed enter/space key in specific radious. This entity can activate other entities, it is have <USE> interaction, one sprite and one sound.
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_refresh"             (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sprite"              (string)        // current entity sprite
    "e_sprite_remback"      (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"       (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"           (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"           (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"       (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"       (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"        (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"        (color || int)  // current entity color
    "e_sprite_image"        (int)           // current entity sprite frame (do not use this)
    "e_mask"                (string)        // collision mask for current entity
    "e_mask_ox"             (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"             (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"        (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_depth"               (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_usedistance"         (int)           // current entity use distance
    "e_shooter"             (bool)          // can be activated by shooting
    "e_toggle"              (bool)          // entity can be activated only by other entity
    "e_allowmonsters"       (bool)          // allows monsters to activate entity
    "e_allownpc"            (bool)          // allows NPC to activate entity
    "e_allowplayer"         (bool)          // allows player to activate entity
    "e_allowtele"           (bool)          // allows teleportation ball to activate entity
    "e_collision"           (bool)          // destroy projectiles on collision (if "e_shooter" is "true")
    "e_collied_only_ranged" (bool)          // if false then melee projectiles can simultaneously activate entity and hit nearby monster before been marked as "collieded" (if "e_collision" is "true" and "e_shooter" is "true")
    "e_inspector"           (string)        // entity name that will be displayed on the inspector
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Calculator (ent_calculator) --------------------//
{
    //@brief - Used when you need to perform operation over two input values(stored in this entity) and write result of operation in to another entity.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_input_a"         (float)         // first input value
    "e_input_b"         (float)         // second input value
    "e_calc_type"       (int)           // calculator operation type
    "e_output_target"   (string)        // name of entity to set output value in ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_output_parm"     (string)        // name of targeted entity parameter to set output value (if "e_output_target" have value, !Activate allowed)
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
    
    "e_calc_type" (ACTIONS) {

        #region REGULAR MATH 
        // Notes - brackets ( / ) show what type of data e_input_a and e_input_b should be. Again, order always is (a/b).
        // By default e_input_a and e_input_b properties in Tiled have integer type (that's if you import D'LIRIUM Object Types).
        // Float and integer and boolean types implicitly converts to each others, but strings don't converts by themselves.
        // And remember that conversion int --> float is not a problem, but float --> int will cause a fractional part loss.
        
             "0" (f/f) "A + B"                // Add "e_input_a" to "e_input_b"
             "1" (f/f) "A - B"                // Subtract "e_input_b" from "e_input_a"
             "2" (f/f) "A * B"                // Multiply "e_input_a" by "e_input_b"
             "3" (f/f) "A / B"                // Divide "e_input_a" by "e_input_b"
             "4" (f/f) "A div B"              // Integer division "e_input_a" by "e_input_b" i.e. get whole part of devision and remove reminder of devision
             "5" (f/f) "A mod B"              // Modular division "e_input_a" by "e_input_b" i.e. get the reminder of devision
             "6" (f)   "sqr{A}"               // Square of "e_input_a"
             "7" (f)   "sqrt{A}"              // Square root of "e_input_a"
             "8" (f/f) "power{A} B times"     // Multiply "e_input_a" by itself "e_input_b" number of times
             "9" (f/f) "logn{A} n = B"        // Get how many "e_input_b" we need to multiply to get "e_input_a"
            "10" (f)   "power{e} A times"     // Multiply 2.718281828 (also known as Euler's Number) by itself "e_input_a" number of times
            "11" (f)   "ln{A}"                // Get natural logarithm of "e_input_a"
            "12" (f)   "log2{A}"              // Get how many 2's we need to multiply to get "e_input_a"
            "13" (f)   "log10{A}"             // Get how many 10's we need to multiply to get "e_input_a"
            "14" (f)   "frac{A}"              // Get fractional part of "e_input_a", that is, the part behind the decimal dot
            "15" (f)   "round{A}"             // Get the round of "e_input_a" to the nearest integer (1.2 --> 1, 1.666 --> 2, -7.91 --> -8, -0.1 --> 0, 5 --> 5, etc)
            "16" (f)   "floor{A}"             // Get the floor of "e_input_a", i.e like round but always down (4.1 --> 4, 4.9 --> 4, -4.1 --> -5, -4.9 --> -5, 6 --> 6, etc)
            "17" (f)   "ceil{A}"              // Get the ceil of "e_input_a", i.e like round but always up (0.1 --> 1, 0.9 --> 1, -1.9 --> -1, -1.1 --> -1, 7 --> 7, etc)
            "18" (f)   "abs{A}"               // Get the absolute value of a "e_input_a"
            "19" (i/i) "int rng from A to B"  // Generates random integer number (whole number like 0, 13, -5, etc) from "e_input_a" to "e_input_b"
            "20" (f/f) "float rng from A to B"// Generates random float number (decimal number like 0.2, 4.42, -6.66, etc) from "e_input_a" to "e_input_b"
            "21" (f)   "is A are + or - or 0" // Get whether a "e_input_a" is positive, negative or neither(zero) and returns 1, -1, 0 respectively.
            "22" (f/f) "get max A or B"       // Get value from the maximum of "e_input_a" or "e_input_b"
            "23" (f/f) "get min A or B"       // Get value from the minimum of "e_input_a" or "e_input_b"
            "24" (f/f) "get mean A and B"     // Get the mean of "e_input_a" and "e_input_b" i.e. (a+b)/2
            "25" ()    "get timer"            // Get time that game has been running in microseconds, use it for hight precision calculation where time involved.
                                              // (e.g. for you own delta time) Note that returned time changes even between different entitis instances in one frame! 
                                              // So best usage is to get it only with one calculator and frrom it write time to all entities where needed.

        #endregion
		
        #region TRIGONOMETRY
        //Notes - Degrees and radians are just regular float numbers in game engine. You can feed float and integer numbers into trigonometry operation.
        //If operation need degrees it will treat any number data like degrees . And if operation need radian it will treat any number data like radian.
        //So use 26 and 27 operations before feed degrees in to operation that expect radians and vise versa.
        //For brevity's sake in this paragraph (not in game), "pi" is equal 3.14159265 (NOT 180 degrees).
    
            "26" (d)   "degrees A to radians"          // Convert "e_input_a" degrees to radians i.e. a*(pi/180), (180 --> pi, 57.29578 --> 1, etc)
            "27" (r)   "radians A to degrees"          // Convert "e_input_a" radians to degrees i.e. a*(180/pi), (1 --> 57.29578, pi --> 180, etc)
            "28" (r)   "sin{A rad}        return rad"  // Get the sine of "e_input_a" radians (returned result are in range from -1 to 1)
            "29" (r)   "cos{A rad}        return rad"  // Get the cosine of "e_input_a" radians (returned result are in range from -1 to 1)
            "30" (r)   "tan{A rad}        return rad"  // Get the tangens of "e_input_a" radians, note that pi/2 or -pi/2 (and similar) in theory need to return infinity but in reality they will just return huge numbers
            "31" (r)   "arcsin{A rad}     return rad"  // Get the arcsin of "e_input_a" radians, note that this operation will only accept a value between -1 and 1, anything else will be clamped to -1 or 1 (result are in range from -pi/2 to pi/2)
            "32" (r)   "arccos{A rad}     return rad"  // Get the arccos of "e_input_a" radians, note that this operation will only accept a value between -1 and 1, anything else will be clamped to -1 or 1 (result are in range from 0 to pi/2)
            "33" (r)   "arctan{A rad}     return rad"  // Get the arctan of "e_input_a" radians (returned result are in range from -pi/2 to pi/2)
            "34" (f/f) "arctan of 2 sides return rad"  // Get the arctan where "e_input_a" is opposite side of triangle and "e_input_b" is adjacent side of triangle
            "35" (d)   "dsin{A deg}       return rad"  // Get the sine of "e_input_a" degrees (returned result are in range from -1 to 1)
            "36" (d)   "dcos{A deg}       return rad"  // Get the cosine of "e_input_a" degrees (returned result are in range from -1 to 1)
            "37" (d)   "dtan{A deg}       return rad"  // Get the tangens of "e_input_a" degrees, note that 90 or -90 (and similar) in theory need to return infinity but in reality they will just return huge numbers
            "38" (r)   "darcsin{A rad}    return deg"  // Get the arcsin of "e_input_a" radians, note that this operation will only accept a value between -1 and 1, anything else will be clamped to -1 or 1 (result are in range from -90 to 90)
            "39" (r)   "darccos{A rad}    return deg"  // Get the arccos of "e_input_a" radians, note that this operation will only accept a value between -1 and 1, anything else will be clamped to -1 or 1 (result are in range from 0 to 180)
            "40" (r)   "darctan{A rad}    return deg"  // Get the arctan of "e_input_a" radians (returned result are in range from -pi/2 to pi/2)
            "41" (f/f) "arctan of 2 sides return deg"  // Get the arctan where "e_input_a" is opposite side of triangle and "e_input_b" is adjacent side of triangle
            "42" (f/f) "distance from here to x=A,y=B" // Distance from this calculator x;y to point with "e_input_a";"e_input_b"
            "43" (f/f) "angle between here and x=A,y=B"// Angle between this calculator x;y and point with "e_input_a";"e_input_b"
            "44" (d/d) "angle difference"              // Smallest difference between "e_input_a" degrees and and "e_input_b" degrees (returned value will be between -180 and 180 degrees)
            "45" (f/d) "component_x"                   //  Get the x component from vector with lenght "e_input_a" and angle "e_input_b" degrees
            "46" (f/d) "component_y"                   //  Get the y component from vector with lenght "e_input_a" and angle "e_input_b" degrees
        
        #endregion

        #region STRINGS
        // Notes - Pay attention to types when working with strings (for example - subtract string from string or cosine of "Hello World" will cause game to crash)
        // If you work with string and receive DoConv error that can mean that you feed string in to operation that need number or vise versa.
        // Also keep in mind that strings are indexed from 1. So 1 is the first position in the string, not 0 as you may expect.

            "47" (s)   "num from str A"                      // Get all numbers from "e_input_a" string and convert them to integer (only 0..9), return -1 if there is no number symbols in string
            "48" (s)   "rough num from A str"                // Attempt to convert "e_input_a" string to float number (0..9 and - and .) , but be awere that any other symbols will crash the game
            "49" (f/i) "num A to str with B amoun frac part" // Convert "e_input_a" float/integer number to string, "e_input_b" determine how many numbers from fractional part will be convertd
            "50" (s/s) "concatenate str A + str B"           // Add "e_input_a" as string to "e_input_b" string (aka concatenation operation)
            "51" (s/s) "count appears of str B in str A"     // Count amount of times "e_input_b" substring appears within a "e_input_a" string (b = die, a = i_die_from_diet --> 2)
            "52" (s/i) "get symbol at B in str A"            // Get symbol at "e_input_b" position within a "e_input_a" string            (b = 3, a = qwertyASDFG --> e)
            "53" (s/i) "remove symbol at B from str A"       // Remove symbol at "e_input_b" position within a "e_input_a" string         (b = 3, a = qwertyASDFG --> qwrtyASDFG)
            "54" (s/i) "get B symbols from begin of str A"   // Get "e_input_b" amount of symbols from the begin of "e_input_a" string    (b = 3, a = qwertyASDFG --> qwe)
            "55" (s/i) "get B symbols from end of str A"     // Get "e_input_b" amount of symbols from the end of "e_input_a" string      (b = 3, a = qwertyASDFG --> DFG)
            "56" (s/i) "remove B symbols from begin of str A"// Remove "e_input_b" amount of symbols from the begin of "e_input_a" string (b = 3, a = qwertyASDFG --> rtyASDFG)
            "57" (s/i) "remove B symbols from end of str A"  // Remove "e_input_b" amount of symbols from the end of "e_input_a" string   (b = 3, a = qwertyASDFG --> qwertyAS)
            "58" (s/s) "find pos of first str B in str A"    // Find postion of first "e_input_b" substring in the "e_input_a" string, return 0 if there is no such substring (b = die, a = i_die_from_diet --> 3)
            "59" (s/s) "find pos of last str B in str A"     // Find postion of last "e_input_b" substring in the "e_input_a" string, return 0 if there is no such substring (b = die, a = i_die_from_diet --> 12)
            "60" (s)   "remove all non let from str A"       // Remove from "e_input_a" string all symbols that are not classed as letters (keep all A..Z and a..z)
            "61" (s)   "remove all non let+dig from str A"   // Remove from "e_input_a" string all symbols that are not classed as letters and numbers (keep all A..Z and a..z and 1..9)
            "62" (s)   "number of symbols in str A"          // Get number of symbols in "e_input_a" string.
            "63" (s/s) "remove first str B from str A"       // Remove from "e_input_a" string first founded "e_input_b" substring.
            "64" (s/s) "remove last str B from str A"        // Remove from "e_input_a" string last founded "e_input_b" substring.
            "65" (s/s) "remove all str B from str A"         // Remove from "e_input_a" string all founded "e_input_b" substring.
            "66" (s)   "str A to upercase"                   // Get modified "e_input_a" string in which all upercase symbols replaced with the lowercase (works only with English alphabet A..Z)
            "67" (s)   "str A to lowercase"                  // Get modified "e_input_a" string in which all lowercase symbols replaced with the upercase (works only with English alphabet a..z)
            "68" (s/i) "power_string{A} B times"             // Add "e_input_a" string to itself "e_input_b" times
            "69" (?)   "(Debug) typeof A"                    // Debug operation! Get data type of "e_input_a" variable as string. Helpfull to understanding how game "see" Tiled types
            "70" (s)   "BIN to INT"                          // Convert "e_input_a" string that represent binary number (0 and 1) to integer number (0..9) (support only positive numbers)
            "71" (i)   "INT to BIN"                          // Convert "e_input_a" integer number (0..9) to string that represent binary number (0 and 1), use "e_input_b" to set min length of output (positive numbers will be filled with additional 0's, negative with 1's)
            "72" (s)   "HEX to INT"                          // Convert "e_input_a" string that represent hexadecimal number (0..F)or(0..f) to integer number (0..9)
            "73" (i)   "INT to HEX"                          // Convert "e_input_a" integer number (0..9) to string that represent hexadecimal number (0..F),  use "e_input_b" to set min length of output (positive numbers will be filled with additional 0's, negative with F's)
            "74" (s)   "HEX to BIN"                          // Convert "e_input_a" string that represent hexadecimal number (0..F)or(0..f) to string that represent binary number (0 and 1)
            "75" (s)   "BIN to HEX"                          // Convert "e_input_a" string that represent binary number(0 and 1) to string that represent hexadecimal number (0..F)
            "76" (i)   "GAME int color to RGB str color"     // Convert "e_input_a" integer that Game use as BGR color in to RGB string (255 --> ff0000, 65280 --> 00ff00, 16711680 --> 0000ff, 9293562 --> face8d) (note alpha is separated entity property)
            "77" (s)   "RGB str color to GAME int color"     // Convert "e_input_a" RGB string in to integer that Game use as BGR color (ff0000 --> 255, 00ff00 --> 65280, 0000ff --> 16711680, face8d --> 9293562) (note alpha is separated entity property)
    
        #endregion
    
        #region BITWISE

            "78" (i/i) "bits A AND bits B"// Compares each bit of the "e_input_a" integer to the corresponding bit of the "e_input_b" integer, if both bits are 1, corresponding result bit is set to 1
            "79" (i/i) "bits A OR bits B" // Compares each bit of the "e_input_a" integer to the corresponding bit of the "e_input_b" integer, if at lest one bit are 1, corresponding result bit is set to 1
            "80" (i/i) "bits A XOR bits B"// Compares each bit of the "e_input_a" integer to the corresponding bit of the "e_input_b" integer, if one bit are 1 and other is 0, corresponding result bit is set to 1
            "81" (i/i) "bits shift A << B"// Shift bits of the "e_input_a" integer to the left
            "82" (i/i) "bits shift A >> B"// Shift bits of the "e_input_a" integer to the right
        
        #endregion
		
    }

}

//-------------------- Entity Cinematic (ent_cinematic) --------------------//
{
    //@shape - always point

    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_cgi_above"       (bool)          // sets cinematic to draw above GUI (if "true")
    "e_cgi_frame"       (bool)          // draws game frame while cinematic is activated
    "e_draw_priority"   (int)           // sets the draw order if draws above screen or GUI
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
    "e_progress"        (bool)          // Cinematic progress state. Do not change it manually! You need to activate cinematic to properly pause/play it.
}

//-------------------- Entity Comparator (ent_comparator) --------------------//
{
    //@brief - Used when you need to perform operation over two input values(stored in this entity) and write result of operation in to another entity. Similar to "Entity Calculator" but separated in to independant entity for convenience reasons.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_input_a"         (float)         // first input value
    "e_input_b"         (float)         // second input value
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_compare_type"    (int)           // comparator operation type
    "e_output_target"   (string)        // name of entity to set output value in ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_output_parm"     (string)        // name of targeted entity parameter to set output value (if "e_output_target" have value, !Activate allowed)
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"

    "e_compare_type" (ACTIONS) {

        "0"     // "A == B" // is e_input_a equal to e_input_b
        "1"     // "A < B"  // is e_input_a less than e_input_b
        "2"     // "A > B"  // is e_input_a greater than e_input_b
        "3"     // "A <= B" // is e_input_a less or equal to e_input_b
        "4"     // "A >= B" // is e_input_a greater or equal to e_input_b
        "5"     // "A != B" // is e_input_a not equal e_input_b
        "6"     // "A && B" // logical e_input_a AND e_input_b
        "7"     // "A || B" // logical e_input_a OR  e_input_b
        "8"     // "A ^^ B" // logical e_input_a XOR e_input_b
        "9"     // "!A"     // logical NOT e_input_a

    }
}

//-------------------- Entity Constant (ent_constant) --------------------//
{
    //@brief - Used when you need to program(write) value(that you get from game vide constant) in to another entity. Like vanilla colors (that you can write in to level_lightmap/e_sprite_color/e_light_color/etc), monsters maxHP/speed/viewdistance, items heal/damage and many more others. This also ensures that your map will use the right values on whichever version of the game it is running on.
    //@shape - always point

    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_input"           (float || string) // This entity property will be used to programm "e_output_parm" of the "e_output_target" entity (work if "e_constant" == ""). Basically this property work identical as "e_prog_value" of the Entity Programmer.
    "e_constant"        (string)        // Enity will searсh for game constant with "e_constant" name (you can find all names from "////constants names////" section) and set output value to value of such constant instead of using "e_input". If name of the constant spelled incorrectly then nothing will be programmed and will be generated custom map error (you need to use "ignorecustom" command to switch visibility of thous errors).
    "e_output_target"   (string)        // name of entity to set output value in ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_output_parm"     (string)        // name of targeted entity parameter to set output value (if "e_output_target" have value, !Activate allowed)
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Counter (ent_counter) --------------------//
{
    //@brief - Used when you need to activate other entity after specific amount of this entity activations.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_counter"         (int)           // number of current entity activations until target activation
    "e_counter_reset"   (bool)          // defines it counter will reset number of activations after reaching the goal
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Decor (ent_decor) --------------------//
{
    //@brief - Used when you need simple(no <USE> interaction) decorative object with sprite, hitbox, and shadow.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"   (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"    (color || int)  // current entity color
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_mask"            (string)        // collision mask for current entity
    "e_mask_ox"         (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"         (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"    (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_solid_type"      (int)           // sets collision for entity ("0" - no collision, "1" - projectiles can pass, "2" - full solid)
    "e_inspector"       (string)        // entity name that will be displayed on the inspector
    "e_shadow"          (bool)          // allow entity to cast a shadow
    "e_shadow_bot"      (bool)          // sets shadow to cast from bottom side
}

//-------------------- Entity Destroyer (ent_destroyer) --------------------//
{
    //@brief - Used when you need to delete other entity from the level field on runtime.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_destroy_target"  (string)        // name of entity that will be destroyed
    "e_destroy_self"    (bool)          // self-destroy after all work done
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Dialogue (ent_dialogue) --------------------//
{
    //@brief - Used when you need dialogues pop-ups. Hightly customizable! You can even have "options"("choices") that activate their own targeted entities (i.e. you can make branched dialogues).
    //@shape - always point
    
    //Basis

    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // target name to activate it after dialogue ends (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)

    //Sound

    "e_sound"           (string)        // text typing sound (quiet if "sound_NULL" or "")
    "e_sound_poly"      (bool)          // allow to play "e_sound" again if it's not finished playing yet
    "e_sound_begin"     (string)        // page typing start sound
    "e_sound_end"       (string)        // page typing end sound
    "e_sound_pause"     (float)         // pause between sound playbacks

    //Dialogue

    "e_diag_player"     (bool)          // Shut player's mouth i.e. stop sound of player voice (used in story mode when Ada react while killing someone)
    "e_diag_skip"       (bool)          // allow player to skip text typing
    "e_diag_dur"        (int)           // delay before automatical page flipping
    "e_diag_X"          (int)           // X position of textbox (regarding the GUI)
    "e_diag_Y"          (int)           // Y position of textbox (regarding the GUI)
    "e_draw_priority"   (int)           // sets the draw order if draws above screen or GUI

    //Textbox background sprite

    "e_background"          (string)        // textbox background sprite
    "e_background_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_background" is external)
    "e_background_smooth"   (bool)          // smooth the sprite edges (if "e_background_remback" is "true")
    "e_background_ox"       (int)           // sprite X origin (if "e_background" is external)
    "e_background_oy"       (int)           // sprite Y origin (if "e_background" is external)
    "e_background_xscale"   (float)         // sprite X scale ("1" is default)
    "e_background_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_background_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_background_alpha"    (float)         // sprite alpha ("0" to "1")
    "e_background_frames"   (int)           // number of images in sprite
    "e_background_image"    (int)           // current sprite frame
    "e_background_anim"     (float)         // sprite animation speed
    "e_background_col"      (color || int)  // sprite color
    "e_background_ninesl"   (bool)          // create a Nine Slice struct which can be modified and then applied to a sprite (if "e_background" is external)
    "e_background_ninesl_L" (int)           // Nine Slice struct left border (if "e_background_ninesl" is "true")
    "e_background_ninesl_R" (int)           // Nine Slice struct right border (if "e_background_ninesl" is "true")
    "e_background_ninesl_T" (int)           // Nine Slice struct top border (if "e_background_ninesl" is "true")
    "e_background_ninesl_B" (int)           // Nine Slice struct bottom border (if "e_background_ninesl" is "true")
    "e_background_border_L" (int)           // sprite left border (X position, regarding the "e_diag_X")
    "e_background_border_T" (int)           // sprite top border (Y position, regarding the "e_diag_Y")

    //Textbox portrait sprite

    "e_portrait"            (string)        // textbox portrait (speaker) sprite
    "e_portrait_remback"    (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_portrait" is external)
    "e_portrait_smooth"     (bool)          // smooth the sprite edges (if "e_portrait_remback" is "true")
    "e_portrait_ox"         (int)           // sprite X origin (if "e_portrait" is external)
    "e_portrait_oy"         (int)           // sprite Y origin (if "e_portrait" is external)
    "e_portrait_xscale"     (float)         // sprite X scale ("1" is default)
    "e_portrait_yscale"     (float)         // sprite Y scale ("1" is default)
    "e_portrait_angle"      (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_portrait_alpha"      (float)         // sprite alpha ("0" to "1")
    "e_portrait_frames"     (int)           // number of images in sprite
    "e_portrait_image"      (int)           // current sprite frame
    "e_portrait_anim"       (float)         // sprite animation speed
    "e_portrait_col"        (color || int)  // sprite color
    "e_portrait_ninesl"     (bool)          // create a Nine Slice struct which can be modified and then applied to a sprite (if "e_portrait" is external)
    "e_portrait_ninesl_L"   (int)           // Nine Slice struct left border (if "e_portrait_ninesl" is "true")
    "e_portrait_ninesl_R"   (int)           // Nine Slice struct right border (if "e_portrait_ninesl" is "true")
    "e_portrait_ninesl_T"   (int)           // Nine Slice struct top border (if "e_portrait_ninesl" is "true")
    "e_portrait_ninesl_B"   (int)           // Nine Slice struct bottom border (if "e_portrait_ninesl" is "true")
    "e_portrait_border_L"   (int)           // sprite left border (X position, regarding the "e_diag_X")
    "e_portrait_border_T"   (int)           // sprite top border (Y position, regarding the "e_diag_Y")

    //Textbox options background sprite

    "e_option_spr"          (string)        // textbox option sprite (if dialogue has any options)
    "e_option_spr_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_option_spr" is external)
    "e_option_spr_smooth"   (bool)          // smooth the sprite edges (if "e_option_spr_remback" is "true")
    "e_option_spr_ox"       (int)           // sprite X origin (if "e_option_spr" is external)
    "e_option_spr_oy"       (int)           // sprite Y origin (if "e_option_spr" is external)
    "e_option_spr_xscale"   (float)         // sprite X scale ("1" is default)
    "e_option_spr_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_option_spr_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_option_spr_alpha"    (float)         // sprite alpha ("0" to "1")
    "e_option_spr_frames"   (int)           // number of images in sprite
    "e_option_spr_image"    (int)           // current sprite frame
    "e_option_spr_anim"     (float)         // sprite animation speed
    "e_option_spr_col"      (color || int)  // sprite color
    "e_option_spr_ninesl"   (bool)          // create a Nine Slice struct which can be modified and then applied to a sprite (if "e_option_spr" is external)
    "e_option_spr_ninesl_L" (int)           // Nine Slice struct left border (if "e_option_spr_ninesl" is "true")
    "e_option_spr_ninesl_R" (int)           // Nine Slice struct right border (if "e_option_spr_ninesl" is "true")
    "e_option_spr_ninesl_T" (int)           // Nine Slice struct top border (if "e_option_spr_ninesl" is "true")
    "e_option_spr_ninesl_B" (int)           // Nine Slice struct bottom border (if "e_option_spr_ninesl" is "true")
    "e_option_spr_border_L" (int)           // sprite left border (X position, regarding the "e_diag_X")
    "e_option_spr_border_T" (int)           // sprite top border (Y position, regarding the "e_diag_Y")

    //Textbox selected option sprite

    "e_answer_spr"          (string)        // textbox option selection sprite (if dialogue has any options)
    "e_answer_spr_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_answer_spr" is external)
    "e_answer_spr_smooth"   (bool)          // smooth the sprite edges (if "e_answer_spr_remback" is "true")
    "e_answer_spr_ox"       (int)           // sprite X origin (if "e_answer_spr" is external)
    "e_answer_spr_oy"       (int)           // sprite Y origin (if "e_answer_spr" is external)
    "e_answer_spr_xscale"   (float)         // sprite X scale ("1" is default)
    "e_answer_spr_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_answer_spr_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_answer_spr_alpha"    (float)         // sprite alpha ("0" to "1")
    "e_answer_spr_frames"   (int)           // number of images in sprite
    "e_answer_spr_image"    (int)           // current sprite frame
    "e_answer_spr_anim"     (float)         // sprite animation speed
    "e_answer_spr_col"      (color || int)  // sprite color
    "e_answer_spr_ninesl"   (bool)          // create a Nine Slice struct which can be modified and then applied to a sprite (if "e_answer_spr" is external)
    "e_answer_spr_ninesl_L" (int)           // Nine Slice struct left border (if "e_answer_spr_ninesl" is "true")
    "e_answer_spr_ninesl_R" (int)           // Nine Slice struct right border (if "e_answer_spr_ninesl" is "true")
    "e_answer_spr_ninesl_T" (int)           // Nine Slice struct top border (if "e_answer_spr_ninesl" is "true")
    "e_answer_spr_ninesl_B" (int)           // Nine Slice struct bottom border (if "e_answer_spr_ninesl" is "true")
    "e_answer_spr_border_L" (int)           // sprite left border (X position, regarding the "e_diag_X")
    "e_answer_spr_border_T" (int)           // sprite top border (Y position, regarding the "e_diag_Y")

    //Built in text pages

    "e_text_page0"          (string)    // 0st text page ("" to skip the page)
    "e_text_page1"          (string)    // 1st text page ("" to skip the page)
    //...
    "e_text_page15"         (string)    // 15th text page ("" to skip the page)
    "e_text_page16"         (string)    // 16th text page ("" to skip the page)

    //Text pages from file

    "e_text_file"           (string)    // Name of text (.txt) file to get pages from, instead built in pages. You only need to supply a name of file WITHOUT file extension.
    "e_text_line0"          (int)       // 0st text page from file ("-1" to skip the line)
    "e_text_line1"          (int)       // 1st text page from file ("-1" to skip the line)
    //...
    "e_text_line15"         (int)       // 15th text page from file ("-1" to skip the line)
    "e_text_line16"         (int)       // 16th text page from file ("-1" to skip the line)

    //Other text parameters

    "e_text_spd"            (float)     // text typing speed
    "e_text_pause_period"   (int)       // typing pause after period in text
    "e_text_pause_comma"    (int)       // typing pause after comma in text
    "e_text_pause_question" (int)       // typing pause after question mark in text
    "e_text_pause_excl"     (int)       // typing pause after exclamation mark in text
    "e_text_border_L"       (int)       // text left border (X position, regarding the "e_diag_X")
    "e_text_border_T"       (int)       // text top border (Y position, regarding the "e_diag_Y")
    "e_text_width"          (int)       // text width

    //Text effects

    "e_text_wave"           (bool)      // wavy text effect
    "e_text_wave_spd"       (int)       // wavy text speed (if "e_text_wave" is "true")
    "e_text_wave_power"     (int)       // wavy text power (wave height, if "e_text_wave" is "true")
    "e_text_shake"          (bool)      // shaking text effect
    "e_text_shake_spdMin"   (int)       // shaking text minimum speed (if "e_text_shake" is "true")
    "e_text_shake_spdMax"   (int)       // shaking text maximum speed (if "e_text_shake" is "true")
    "e_text_shake_power"    (int)       // shaking text intensivity (if "e_text_shake" is "true")
    "e_text_shake_delay"    (int)       // delay before next shake (if "e_text_shake" is "true")

    //Text color

    "e_text_col"        (color || int)  // text color
    
    //Built in options

    "e_option_0"            (string)    // 0st option ("" to skip the option)
    "e_option_1"            (string)    // 1st option ("" to skip the option)
    //...
    "e_option_7"            (string)    // 7th option ("" to skip the option)
    "e_option_8"            (string)    // 8th option ("" to skip the option)

    //Options from file

    "e_option_file"         (string)    // Name of text (.txt) file to get options from, instead built in options. You only need to supply a name of file WITHOUT file extension.
    "e_option_line0"        (int)       // 0st option from file ("-1" to skip the line)
    "e_option_line1"        (int)       // 1st option from file ("-1" to skip the line)
    //...
    "e_option_line7"        (int)       // 7th option from file ("-1" to skip the line)
    "e_option_line8"        (int)       // 8th option from file ("-1" to skip the line)

    //Option targets

    "e_option_0_target"     (string)    // target to activate by selecting 0st option
    "e_option_1_target"     (string)    // target to activate by selecting 1st option
    //...
    "e_option_7_target"     (string)    // target to activate by selecting 7th option
    "e_option_8_target"     (string)    // target to activate by selecting 8th option

    //Other option parameters

    "e_option_border_L"     (int)       // option left border (X position, regarding the "e_diag_X")
    "e_option_border_T"     (int)       // option top border (Y position, regarding the "e_diag_Y")
    "e_option_space"        (int)       // vertical space between options

    //Option color

    "e_option_col"      (color || int)  // option color

    //Special sorting parameters

    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"

    //Other
    "e_progress"        (bool)          // Dialogue progress state. Do not change it manually! You need to activate dialogue to properly start/stop it. 

    //Note - in this entity "e_text_file" and "e_option_file" also have localization support.
    //This means that you can have separate files for different languages. All you need to do is add a special suffix to the end of the filename.
    //Possible suffixes are :
    //     "_en.txt"    (English)
    //     "_ru.txt"    (Russian)
    //     "_zhs.txt"   (Simplified Chinese)
    //     "_zht.txt"   (Traditional Chinese)
    //     "_fr.txt"    (French)
    //     "_by.txt"    (Belarusian)
    //     "_pl.txt"    (Polish)
    //     "_ua.txt"    (Ukrainian)
    //     "_de.txt"    (German)
    //     "_hu.txt"    (Hungarian)
    //     "_cz.txt"    (Czech)
    //     "_es.txt"    (Spanish)
        // The algorithm works as follows -
	    // 1. It tries to open the file with the suffix of the currently selected player language.
	    // 2. If 1. does not exist, then it tries to open the file with "_en.txt" suffix.
	    // 3. If 2. does not exist, then it will open the file without any suffixes as you supplied.
    // As example here is setup for English and Russian localizations :
    // If your map named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then text files "my_test.txt" and "my_test_en.txt" and "my_test_ru.txt" should have path "%LocalAppdata%/delirium/maps/my_map/my_test.txt" and "%LocalAppdata%/delirium/maps/my_map/my_test_en.txt" and "%LocalAppdata%/delirium/maps/my_map/my_test_ru.txt" respectively, and "e_text_file"/"e_option_file" properties should have "my_test" value in it.
    // Players who have selected the English language in their settings will see lines from "my_test_en.txt".
    // Players who have selected the Russian language in their settings will see lines from "my_test_ru.txt".
    // Players who have selected any other language in their settings will see lines from "my_test.txt".

}

//-------------------- Entity Dice (ent_dice) --------------------//
{
    //@brief - Used when you need to activate other entity with a some chance (i.e. roll the chance and depending on it activate other entity or do nothing).
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_dice_sides"      (int)           // defines "e_target" activation chance according to the formula: 1 / (e_dice_sides + 1) (if "e_dice_percent" is less than 0)
    "e_dice_percent"    (float)         // defines "e_target" activation chance in percentage. Value should be from 0 to 100 (used instead of "e_dice_sides" if equal or greater than 0)
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Display (ent_display) --------------------//
{
    //@brief - Used when you need to render sprite or/and text on level field or on player GUI. You can make your custom gui with this entity, but for dialogues please use "Entity Dialogue".
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"   (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"    (color || int)  // current entity color
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_draw_priority"   (int)           // sets the draw order if draws above screen or GUI
    "e_display_gui"     (bool)          // display placement (on GUI if "true", on the level if "false")
    "e_display_x"       (int)           // display X position (if "e_display_gui" is "true")
    "e_display_y"       (int)           // display Y position (if "e_display_gui" is "true")
    "e_display_width"   (int)           // display width (if "e_sprite" is not set)
    "e_display_height"  (int)           // display height (if "e_sprite" is not set)
    "e_display_alpha"   (float)         // display background alpha ("0" to "1")
    "e_display_outline" (bool)          // display outline (if "e_sprite" is not set)
    "e_text"            (string)        // text to draw
    "e_text_file"       (string)        // text file name to use it instead "e_text"
    "e_text_line"       (int)           // text line inside the file to draw (if "e_text_file" has value)
    "e_text_col"        (color || int)  // text color
    "e_text_style"      (int)           // text font ("0" - default game font, defined in game options, "1" - small font, "2" - classic font, "3" - simplified font, "4" - font disabled)
    
    //Note - in this entity "e_text_file" also have localization support.
    //You can read more about how it works in the notes for the Entity Dialogue.
}

//-------------------- Entity Door (ent_door) --------------------//
{
    //@brief - Used when you need hightly customisable door. Can have sprite, hitbox and one sound. It can be opened/closed "only by player" or "only by entities" or "by player and entities".
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_refresh"             (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sprite"              (string)        // current entity sprite
    "e_sprite_remback"      (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"       (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"           (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"           (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"       (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"       (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"        (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"        (color || int)  // current entity color
    "e_sprite_frames"       (int)           // number of images in current sprite
    "e_sprite_image"        (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"         (float)         // animation speed
    "e_mask"                (string)        // collision mask for current entity
    "e_mask_ox"             (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"             (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"        (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_door_open"           (bool)          // door starts in its 'open' position (set "e_sprite_image" parameter to last the frame index ("e_sprite_frame - 1") if "true")
    "e_door_openFrame"      (int)           // sets frame that allows player to pass through door
    "e_door_openAct"        (bool)          // activates targeted entity on open
    "e_door_closeAct"       (bool)          // activates targeted entity on close
    "e_door_key"            (int)           // sets the key required to open ("0" if key is not required, "1" - steel, "2" - brass, "3" - copper, "4" - custom key color set in "e_door_key_color")
    "e_door_key_color"      (color || int)  // sets the custom key color required to open (if "e_door_key" is "4"). Player can unlock "Entity Door" if "e_door_key_color" equal to "key_color" of the picked up "Key" object ("obj_key") (this means that all their corresponding R/G/B values of the "e_door_key_color"-"key_color" pair should be identical).
    "e_door_lockDist"       (int)           // key unlocking distance (if "e_door_keyLock" is "true")
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_usedistance"         (int)           // current entity use distance
    "e_toggle"              (bool)          // entity can be activated only by other entity
    "e_useonly"             (bool)          // entity can be activated by pressing <USE> button
    "e_block"               (bool)          // blocks current entity until refresh
    "e_shooter"             (bool)          // can be activated by shooting
    "e_allowmonsters"       (bool)          // allows monsters to activate entity
    "e_allownpc"            (bool)          // allows NPC to activate entity
    "e_allowplayer"         (bool)          // allows player to activate entity
    "e_allowtele"           (bool)          // allows teleportation ball to activate entity
    "e_collision"           (bool)          // destroy projectiles on collision (if "e_shooter" is "true")
    "e_collied_only_ranged" (bool)          // if false then melee projectiles can simultaneously activate entity and hit nearby monster before been marked as "collieded" (if "e_collision" is "true" and "e_shooter" is "true")
    "e_inspector"           (string)        // entity name that will be displayed on the inspector
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Fade (ent_fade) --------------------//
{
    //@brief - Used when you need to smoothly turn screen in to black(or some other color) and vise versa.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_blending"        (int)           // sets blending mode ("0" - normal, "1" - additive, "2" - subtract, "3" - multiply, "4" - max blending)
    "e_fadein_spd"      (float)         // fade in speed
    "e_fadeout_spd"     (float)         // fade out speed
    "e_fade_color"      (color || int)  // current entity color
    "e_fade_alpha"      (float)         // maximum fade transparency
    "e_fade_type"       (int)           // sets screen to fade: "0" - using "e_depth", "1" - above level, "2" - above screen, "3" - above GUI
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_draw_priority"   (int)           // sets the draw order if draws above screen or GUI
}

//-------------------- Entity Fog (ent_fog) --------------------//
{
    //@brief - Used when you need same thing as "Entity Fade" but with sprite rather than solid color. By default sprite will moves in certain direction, but you can disable this bahaviour.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_color"    (color || int)  // current entity color
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_blending"        (int)           // sets blending mode ("0" - normal, "1" - additive, "2" - subtract, "3" - multiply, "4" - max blending)
    "e_fadein_spd"      (float)         // fade in speed
    "e_fadeout_spd"     (float)         // fade out speed
    "e_fog_alpha"       (float)         // maximum fog transparency
    "e_fog_type"        (int)           // sets fog to draw: "0" - using "e_depth", "1" - above level, "2" - above screen, "3" - above GUI
    "e_fog_spd"         (int)           // sets fog scrolling speed
    "e_fog_dir"         (int)           // sets fog direction ("0" - right, "1" - up, "2" - left, "3" - down)
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_draw_priority"   (int)           // sets the draw order if draws above screen or GUI
}

//-------------------- Entity Grabber (ent_grabber) --------------------//
{
    //@brief - Used when you need to copy value from one entity to another.
    //@shape - always point
    //@double_sorts - first is program (OUT), second is grab (IN)
    
    "e_name"                 (string)   // current entity name
    "e_tag"                  (string)   // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"            (bool)     // current entity activation ("true" if must activate on start)
    "e_input_target"         (string)   // input entity name (if "e_input" is "undefined", "!Player" and "!Global" allowed)
    "e_input_parm"           (string)   // name of targeted entity parameter to grab from input entity
    "e_output_target"        (string)   // name of entity to set output value in ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_output_parm"          (string)   // name of targeted entity parameter to set output value (if "e_output_target" have value, !Activate allowed)
    "e_array_1st_dim"        (int)      // if e_output_parm is the name of an array, you can access its first dimension using that index. (If set to -1 then the array write function is not used)
    "e_array_2nd_dim"        (int)      // if e_output_parm is the name of an array, you can access its second dimension using that index. (If set to -1 then the array write function is not used)
    "e_disable"              (bool)     // deactivate entity after performing activation
    "e_sort_method"          (int)      // Applied to "e_output_target"! "0" (used by default) - all entities specified in "e_output_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"             (string)   // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"            (string)   // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"        (int)      // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"          (int)      // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"              (int)      // x offset of "e_sort_radius"
    "e_sort_oy"              (int)      // y offset of "e_sort_radius"
    "e_second_sort_method"   (int)      // Applied to "e_input_target"! "0" (used by default) - all entities specified in "e_input_target", below second_sort parametrs are ignored, "1" - one nearest entity on "e_second_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_second_sort_position" that match all not empty sorts, "3" - "e_second_sort_position" nearest entities that match all not empty sorts, "4" - "e_second_sort_position" furthest entities that match all not empty sorts, "5" - "e_second_sort_position" some (random) entities that match all not empty sorts.
    "e_second_sort_tag"      (string)   // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_second_sort_type"     (string)   // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_second_sort_position" (int)      // number of entity in order (if "e_second_sort_method" is "1" or "2") OR count of entities (if "e_second_sort_method" is "3" or "4" or "5")
    "e_second_sort_radius"   (int)      // you can find entity in specified radius (or outside it if "e_second_sort_radius" less than or equel "0")
    "e_second_sort_ox"       (int)      // x offset of "e_second_sort_radius"
    "e_second_sort_oy"       (int)      // y offset of "e_second_sort_radius"
}

//-------------------- Entity Hurt (ent_hurt) --------------------//
{
    //@brief - Used when you need to change player healthbars with corresponding animations, sounds and particles.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_dmg"             (int)           // damage to deal
    "e_dmg_type"        (int)           // type of damage ("0" - physical, "1" - psychic, "2" - toxic)
    "e_dmg_blood"       (bool)          // player bleeds on damage
    "e_dmg_cam"         (bool)          // camera shaking on damage
    "e_dmg_pain"        (bool)          // pain effects on damage
    "e_dmg_hud"         (bool)          // HUD damage effect
    "e_dmg_die"         (bool)          // allows player to die if "true"
}

//-------------------- Entity Interact (ent_interact) --------------------//
{
    //@brief - Used when you need interactable(via <USE>) decorative object with sprite, hitbox, and shadow. Unlike "Entity Button" or "Entity Decor" you have much more control over when other entity activations happened and how sprite animation played.
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_refresh"             (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_block"               (bool)          // blocks current entity until refresh
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_sprite"              (string)        // current entity sprite
    "e_sprite_remback"      (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"       (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"           (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"           (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"       (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"       (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"        (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_frames"       (int)           // number of images in current sprite
    "e_sprite_image"        (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"         (float)         // animation speed
    "e_sprite_color"        (color || int)  // current entity color
    "e_mask"                (string)        // collision mask for current entity
    "e_mask_ox"             (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"             (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"        (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_depth"               (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_solid_type"          (int)           // sets collision for entity ("0" - no collision, "1" - projectiles can pass, "2" - full solid)
    "e_interact_type"       (int)           // sets animation type ("0" to "12", any other value will activate targeted entity)
    "e_interact_visible"    (bool)          // sets entity visibility while being deactivated
    "e_usedistance"         (int)           // current entity use distance
    "e_toggle"              (bool)          // entity can be activated only by other entity
    "e_shooter"             (bool)          // can be activated by shooting
    "e_allowmonsters"       (bool)          // allows monsters to activate entity
    "e_allownpc"            (bool)          // allows NPC to activate entity
    "e_allowplayer"         (bool)          // allows player to activate entity
    "e_allowtele"           (bool)          // allows teleportation ball to activate entity
    "e_collision"           (bool)          // destroy projectiles on collision (if "e_shooter" is "true")
    "e_collied_only_ranged" (bool)          // if false then melee projectiles can simultaneously activate entity and hit nearby monster before been marked as "collieded" (if "e_collision" is "true" and "e_shooter" is "true")
    "e_inspector"           (string)        // entity name that will be displayed on the inspector
    "e_shadow"              (bool)          // allow entity to cast a shadow
    "e_shadow_bot"          (bool)          // sets shadow to cast from bottom side
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag
    "e_sort_type"           (string)        // you can find entity by it's type (like "ent_button", "ent_spawner", etc). Also note that this is the only e_sort parameter that truly decrease CPU load caused by sort algorithm
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_x_offset"       (int)           // x offset of "e_sort_radius"
    "e_sort_y_offset"       (int)           // y offset of "e_sort_radius"
    
    "e_interact_type" (ACTIONS) {
        "0"  (Loop, Activate on end)                                     // проигрывание повторяющейся анимации с передачей активации в конце
        "1"  (Play once, Activate on end)                                // проигрывание анимации с передачей активации и выключением в конце, повторное использование повторяет действие заново
        "2"  (Play once, Activate and Block on end)                      // проигрывание анимации с передачей активации, выключением и блокировкой в конце
        "3"  (Play once, Activate on start and end)                      // проигрывание анимации с передачей активации в начале и конце, и выключением в конце, повторное использование повторяет действие заново
        "4"  (Play once, Activate on start and end, Block on end)        // проигрывание анимации с передачей активации в начале и конце, выключением и блокировкой в конце
        "5"  (Loop reverse, Activate on end)                             // проигрывание повторяющейся анимации задом наперед с передачей активации в конце
        "6"  (Play reverse, Activate on end)                             // проигрывание анимации задом наперед с передачей активации и выключением в конце, повторное использование повторяет действие заново
        "7"  (Play reverse, Activate and Block on end)                   // проигрывание анимации задом наперед с передачей активации, выключением и блокировкой в конце
        "8"  (Play reverse, Activate on start and end)                   // проигрывание анимации задом наперед с передачей активации в начале и конце, и выключением в конце, повторное использование повторяет действие заново
        "9"  (Play reverse, Activate on start and end, Block on end)     // проигрывание анимации задом наперед с передачей активации в начале и конце, выключением и блокировкой в конце
        "10" (Play once, Activate on end; Play reverse, Activate on end) // проигрывание анимации с передачей активации и выключением в конце, повторное использование проигрывает анимацию задом наперед, передавая активацию и выключаясь в конце
        "11" (Play once, Activate on end; Play reverse)                  // проигрывание анимации с передачей активации и выключением в конце, повторное использование проигрывает анимацию задом наперед, выключаясь в конце без передачи активации
        "12" (Play once; Play reverse, Activate on end)                  // проигрывание анимации с выключением без передачи активации в конце, повторное использование проигрывает анимацию задом наперед, передавая активацию и выключаясь в конце
        "13" (Go to next frame, Activate on end)                         // переключение на 1 кадр вперед, в конце передача активации и возврат к первому кадру
        "14" (Go to next frame, Activate and Block on end)               // переключение на 1 кадр вперед, в конце передача активации и блокировка
        "15" (Go to previous frame, Activate on end)                     // переключение на 1 кадр назад, в конце передача активации и возврат к последнему кадру
        "16" (Go to previous frame, Activate and Block on end)           // переключение на 1 кадр назад, в конце передача активации и блокировка
    }
}

//-------------------- Entity Light (ent_light) --------------------//
{
    //@brief - Used when you need hightly customisable light source. Can have two sprites that will determine shape of light and glare respectively.
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_follow"              (string)        // attach light object to entity or "!Player"
    "e_follow_npc"          (string)        // attach light object to NPC instead
    "e_follow_monst"        (string)        // attach light object to monster instead
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_light_frames"        (int)           // number of images in current sprite
    "e_light_image"         (int)           // current entity sprite frame (do not use this)
    "e_light_anim"          (float)         // animation speed
    "e_light_sprite"        (string)        // light sprite
    "e_light_remback"       (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_light_smooth"        (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_light_ox"            (int)           // sprite X origin (if "e_sprite" is external)
    "e_light_oy"            (int)           // sprite Y origin (if "e_sprite" is external)
    "e_light_sizeX"         (int)           // light xscale
    "e_light_sizeY"         (int)           // light yscale
    "e_light_color"         (color || int)  // light color
    "e_light_pulse"         (float)         // light pulse speed (no pulse if "0")
    "e_light_alpha"         (float)         // light alpha
    "e_light_fadeIn"        (bool)          // light fade ("0" to fade out)
    "e_light_minAlpha"      (float)         // light minimal alpha (if "e_light_pulse" is "true")
    "e_light_angle"         (int)           // light angle
    "e_light_rot"           (bool)          // light rotation
    "e_light_dirR"          (bool)          // light rotation direction (if "e_light_rot" is "true", "false" to anti-clockwise)
    "e_light_rotSpeed"      (float)         // light rotation speed (if "e_light_rot" is "true")
    "e_light_lant"          (bool)          // enable or disable light while Lantern encounter
    "e_glare"               (string)        // enables glare effect if "true"
    "e_glare_sprite"        (string)        // set glare sprite ("spr_glow_lights", "spr_glow_items", "spr_glow_fire", "spr_glow_projectiles")
    "e_glare_remback"       (bool)          // makes all pixels with the glare sprite background color (left-bottom pixel) transparent (if "e_glare_sprite" is external)
    "e_glare_smooth"        (bool)          // smooth the glare sprite edges (if "e_glare_remback" is "true")
    "e_glare_ox"            (int)           // glare sprite X origin (if "e_glare_sprite" is external)
    "e_glare_oy"            (int)           // glare sprite Y origin (if "e_glare_sprite" is external)
    "e_glare_xscale"        (string)        // set glare xscale
    "e_glare_yscale"        (string)        // set glare yscale
    "e_glare_alpha"         (float)         // set glare alpha ("0" - min, "1" - max)
    "e_glare_minAlpha"      (float)         // set pulse glare alpha ("0" - min, "1" - max, this is an minimum alpha value)
    "e_glare_cinx"          (float)         // set "cinematic" glare xscale
    "e_glare_ciny"          (float)         // set "cinematic" glare yscale
    "e_glare_cindir"        (int)           // set "cinematic" glare angle (anti-clockwise, "0" - right)
}

//-------------------- Entity Log (ent_log) --------------------//
{
    //@brief - Used when you need to debug your map. Hightly customisable, but you can start simply by suppling "e_input_target" and "e_input_parm".
    //@shape - always point
    
    "e_activated"         (bool)          // current entity activation ("true" if must activate on start).
    "e_name"              (string)        // current entity name.
    "e_tag"               (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_text1"             (string)        // Text that need to be logged (number determine order in resulting logged line)
    "e_text2"             (string)        // Text that need to be logged (number determine order in resulting logged line)
    //...
    "e_text8"             (string)        // Text that need to be logged (number determine order in resulting logged line)
    "e_text9"             (string)        // Text that need to be logged (number determine order in resulting logged line)
    "e_log_clear"         (string | int)  // Set desired e_text's equal to ""(empty string) after activation (not only after logging). E.g. value of 146 will clear e_text1 , e_text4 and e_text6 (if this property are 0 or "" means do not clear anything)
    "e_log_ignore_empty"  (string | int)  // Do not log anything if all desired e_text's are empty (also do not execute e_log_clear). E.g. value of 83 will block logging when both e_text3 and e_text8 are "" (if this property are 0 or "" means do not use this feature)
	"e_log_listen"        (string | int)  // Activate itself once per frame when desired e_text's are changed (but not triggered by e_log_clear). E.g. value of 5 will activate this entity if e_text5 are differnt from what it was last frame (if this property are 0 or "" means do not use this feature)
    "e_input_target"      (string)        // If not "" then work as grabber every tick , but instead of programming some other entity , write grabbed value in to itself e_text's specified by "e_output_id_text" , "e_output_parm_text" and "e_output_value_text"
    "e_input_parm"        (string)        // Propetry to grabb from e_input_target entity
    "e_output_id_text"    (int)           // In which e_text write id of entity from where value was been grabbed (if e_input_target is not "") (0 or lover will disable this output)
    "e_output_parm_text"  (int)           // In which e_text write name of property from where value was been grabbed (if e_input_target is not "") (0 or lover will disable this output)
    "e_output_value_text" (int)           // In which e_text write grabbed value (if e_input_target is not "") (0 or lover will disable this output)
    "e_output_prettify"   (bool)          // Add additional text to output's. Disable this if you need only raw id/name/value. (if e_input_target is not "")
	"e_use_console"       (bool)          // Print e_text in to standart output. You need to start game with cmd/powershell to see this output in them!
	"e_use_messagebox"    (bool)          // Show e_text as small dialogue box that separated from main game window (recomended to use in windowed mode).
	"e_use_mini_text"     (bool)          // Spawn text object on entity coordinates, this text object will be selfdeleted after some time.
	"e_mini_text_color"   (color | int)   // Collor of the text object (if "e_use_mini_text" = true).
	"e_sort_method"       (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"          (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"         (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"     (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"       (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"           (int)           // x offset of "e_sort_radius"
    "e_sort_oy"           (int)           // y offset of "e_sort_radius"
    
    //Note - there a three ways of how you can see standart output log (this is where "e_use_console" is write) :
    //1.
    //Right in the game.
    //Easy, but obstructs the view in the game.
    //Use console command "debug" to open in-game debug overlay and open overlay window "Log".
    //2.
    //in the text file.
    //Good, but you will need LATEST notepad++ and ask google "how to use tail in notepad++".
    //To force game write standart output log add this line "-output output.txt -debugoutput output.txt" in to the D'LIRIUM steam comand line parameters field ("Game"-->"Properties..."-->"General"-->"LAUNCH OPTIONS").
    //3.
    //In the git-bash/cmd/powershell.
    //It's possible, but for some reason we managed it to work only in MINGW64 git-bash :thinking:
    //You are on your own here.
}

//-------------------- Entity Movement (ent_movement) --------------------//
{
    //@brief - Used when you need to move something that does not have AI (i.e. NOT monsters, NPCs or Player).
    //@shape - always point
    //@double_sorts - first is moved object (WHO), second is destination (WHERE)
    
    "e_name"                 (string)          // current entity name
    "e_tag"                  (string)          // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"               (string)          // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_move_type"            (int)             // movement type ("0" // directional move to "e_move_target", "1" // move to "e_move_target" avoiding solid structures, "2" // directional move)
    "e_move_target"          (string)          // name of entity to move targeted entity on it (if "e_move_type" isn't "2")
    "e_move_spd"             (float)           // movement speed
    "e_move_dir"             (float || string) // movement direction (if "e_move_type" is "2"). If float then treated as value of anticlockwise angle (0 is right, 90 is up, 180 is left and 270 is down), if string then treated as a e_name of entity between which and this ent_movement new angle should be calculated each tick.
    "e_move_dist"            (float)           // deactivation distance ("-1" to infinity movement)
    "e_jump_target"          (string)          // name of entity to place current entity on it ("!Player" allowed)
    "e_slave"                (string)          // name of entity that will moved
    "e_delay"                (int)             // delay before activation ("30" means 1 second)
    "e_refresh"              (int)             // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"            (bool)            // current entity activation ("true" if must activate on start)
    "e_sound"                (string)          // activation sound (quiet if "sound_NULL")
    "e_sort_method"          (int)             // Applied to "e_slave" and "e_target"! "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"             (string)          // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"            (string)          // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"        (int)             // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"          (int)             // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"              (int)             // x offset of "e_sort_radius"
    "e_sort_oy"              (int)             // y offset of "e_sort_radius"
    "e_second_sort_method"   (int)             // Applied to "e_jump_target", "e_move_target" and "e_move_dir" ! "0" (used by default) - all entities specified in "e_input_target", below second_sort parametrs are ignored, "1" - one nearest entity on "e_second_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_second_sort_position" that match all not empty sorts, "3" - "e_second_sort_position" nearest entities that match all not empty sorts, "4" - "e_second_sort_position" furthest entities that match all not empty sorts, "5" - "e_second_sort_position" some (random) entities that match all not empty sorts.
    "e_second_sort_tag"      (string)          // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_second_sort_type"     (string)          // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_second_sort_position" (int)             // number of entity in order (if "e_second_sort_method" is "1" or "2") OR count of entities (if "e_second_sort_method" is "3" or "4" or "5")
    "e_second_sort_radius"   (int)             // you can find entity in specified radius (or outside it if "e_second_sort_radius" less than or equel "0")
    "e_second_sort_ox"       (int)             // x offset of "e_second_sort_radius"
    "e_second_sort_oy"       (int)             // y offset of "e_second_sort_radius"
    "e_progress"             (bool)            // Movement progress state. Do not change it manually! You need to activate movement to properly start/stop it.
}

//-------------------- Entity Multidestroyer (ent_multidestroyer) --------------------//
{
    //@brief - Used when you need same functionallity as "Entity Destroyer" but to delete more entities by their names in one entity activation (i.e. batch delete by names).
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_destroy_target"      (string)        // name of entity that will be destroyed
    "e_destroy_target0"     (string)        // name of entity that will be destroyed
    "e_destroy_target1"     (string)        // name of entity that will be destroyed
    //...
    "e_destroy_target8"     (string)        // name of entity that will be destroyed
    "e_destroy_target9"     (string)        // name of entity that will be destroyed
    "e_destroy_self"        (bool)          // self-destroy after all work done
    "e_disable"             (bool)          // deactivate entity after performing activation
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Multimanager (ent_multimanager) --------------------//
{
    //@brief - Used when you need to fork your activation chain. Order of e_targ's execution are always the same (from e_targ0 to e_targ9)!
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_targ0"           (string)        // name of entity that can be activated by current entity
    "e_targ1"           (string)        // name of entity that can be activated by current entity
    //...
    "e_targ8"           (string)        // name of entity that can be activated by current entity
    "e_targ9"           (string)        // name of entity that can be activated by current entity
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in targets, below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"

    //Note - Order of e_targ's execution are deterministic (from e_targ0 to e_targ9). You can use this multimanager feature to execute entities in specific order in one game tick(frame) (e.g. you can activate spawner with e_targ1, then change it e_spawn by activation of the programmer with e_targ2 and you can again activate spawner with e_targ3 - this will happens in one game tick and order will be always the same no matter what).
}

//-------------------- Entity Multiprogrammer (ent_multiprogrammer) --------------------//
{
    //@brief - Used when you need same functionallity as "Entity Programmer" but to program more entities/values by their names in one entity activation (i.e. batch program by names).
    //@shape - always point
    
    "e_name"            (string)        // name of any object to program
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_prog_target"     (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm"       (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value"      (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string"     (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)
    "e_array_1st_dim"   (int)           // if e_prog_parm is the name of an array, you can access its first dimension using that index. (If set to -1 then the array write function is not used)
    "e_array_2nd_dim"   (int)           // if e_prog_parm is the name of an array, you can access its second dimension using that index. (If set to -1 then the array write function is not used)
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"

    "e_prog_target0"    (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm0"      (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value0"     (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string0"    (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)

    "e_prog_target1"    (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm1"      (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value1"     (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string1"    (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)
    
    //...
    //...
    //...
    //...
    
    "e_prog_target8"    (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm8"      (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value8"     (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string8"    (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)

    "e_prog_target9"    (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm9"      (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value9"     (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string9"    (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)

}

//-------------------- Entity Node (ent_node) --------------------//
{
    //@brief - Used when you need entity that just a named point on level field.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.

    //Note - When save file is writen, this entity saved ONLY it "x", "y", "e_name" and "e_tag". Any properties that you set to node will not be saved (even size).
}

//-------------------- Entity Portal (ent_portal) --------------------//
{
    //@brief - Used when you need so player/monster/NPC teleports to position of another entity when colliding with this enity.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"   (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_sprite_color"    (color || int)  // current entity color
    "e_mask"            (string)        // collision mask for current entity
    "e_mask_ox"         (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"         (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"    (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL"). In this particullar entity can be "!Portal", this will make one of four random portal sounds. 
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_fx"              (bool)          // special particle effect
    "e_toggle"          (bool)          // entity can be activated only by other entity
    "e_useonly"         (bool)          // entity can be activated by pressing <USE> button. I.e. set this to true if you need to teleport colliding player/monster/NPC only when player USEd teleport or when it is activated by other entity.
    "e_usedistance"     (int)           // current entity use distance
    "e_jump_target"     (string)        // name of entity to place current entity on it
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_inspector"       (string)        // entity name that will be displayed on the inspector
    "e_shadow"          (bool)          // allow entity to cast a shadow
    "e_shadow_bot"      (bool)          // sets shadow to cast from bottom side
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Prefaber (ent_prefaber) --------------------// 
{ 
    //@brief - Used when you need to batch spawn many objects by using another map or with previously saved data in this entity (and vise versa). Also provide ability to make names/tags/targets/etc unique per spawned batch (i.e. allow to easily reuse your entities mechanisms).
    //@shape - when "e_pref_mode"==0 point, but when "e_pref_mode"==1 or 2 or 3 should be rectangular
    
    "e_activated"                         (bool)   // Current entity activation ("true" if must activate on start). 
    "e_name"                              (string) // Current entity name. 
    "e_tag"                               (string) // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types. 
    "e_pref_mode"                         (int)    // What this prefaber should do (from "0" to "3", any other value will be treated as "0").
    "e_pref_activate_on_mode_switching"   (bool)   // If true then prefaber will activate when his mode is changed (to prevent infinite loop this feature ignored mode change made by "e_pref_mode_switching_on_activation").
    "e_pref_mode_switching_on_activation" (bool)   // If true then after activation prefaber will switch his "e_pref_mode" to opposite ("0"<->"1" and "2"<->"3").
    "e_pref_mode_switching_on_distance"   (float)  // Prefaber will manage it mode depending on how far player from this Entity Prefaber is ("0" disables this feature, but negative values will invert it). I.e. when number is positive and ditance between prefaber and player greater than this number, then prefaber will set itself in to save state ("1" or "3", depends on what you set in "e_pref_mode"), but when number is positive and ditance between prefaber and player less than this number,then prefaber will set itself in load state ("0" or "2", depends on what you set in "e_pref_mode").
    "e_pref_distance_offset_x"            (float)  // X offset of point from wich prefaber checked distance between him and player (if "e_pref_distance_offset_set_middle" is false) (by default it is seted to width/2 of the prefaber, but if you set it to "0" then it will be the top left corner of the prefaber. i.e. his x).
    "e_pref_distance_offset_y"            (float)  // Y offset of point from wich prefaber checked distance between him and player (if "e_pref_distance_offset_set_middle" is false) (by default it is seted to height/2 of the prefaber, but if you set it to "0" then it will be the top left corner of the prefaber. i.e. his y).
    "e_pref_distance_offset_set_middle"   (bool)   // By default prefaber will set his own "e_pref_distance_offset_x" and "e_pref_distance_offset_y" in the middle of itself on the first frame after creation. However, you can disable this behaviour by setting this property to false. (For example if you want to spawn spiceific sized prefaber from spawner).
    "e_pref_destroy_saved"                (bool)   // If true then prefaber will delete every object instance that he has saved (when "e_pref_mode" "1" or "3").
    "e_pref_saved_types"                  (string) // What types of objects should prefaber save (when "e_pref_mode" "1" or "3"). You can supply multiple types by separating them with ";" e.g. "Monster Wandering;obj_enemy_flying;!Entity;obj_interact_plita;Item Plant" (note , Entity Prefaber is ok , but it will save only others prefabers , i.e. "notme").
    "e_pref_create_image_layers"          (bool)   // By default prefaber load only object layers and global variables from prefab file. However, with this property equal to true you can tell to also load image layers. But be aware that right now you don't have any ability to manipulate such layers and they are not saved in save file! So this feature in some sort of preview state and will need additional logic from you to use it right now properly (if your map have savepoints or abilty to enter personal hell)! Also note, that prefab file should use .png near it (i.e. in the same folder) but you also need same .png near main map, sorry, i don't want to fix this spaghetty between Tiled and D' right now ._.
    "e_pref_create_tile_layers"           (bool)   // Same as "e_pref_create_image_layers" but this one for tile layers.
    "e_pref_file"                         (string) // Name of the prefab file without extension (when e_pref_mode "0" or "1"). Name of the prefab file always should start with "!prefab" . E.g. If your map named "my_map.tmj" and it path is "%LocalAppdata%/delirium/maps/my_map.tmj" then prefab "!prefab_my_test.tmj" should have path "%LocalAppdata%/delirium/maps/my_map/!prefab_my_test.tmj", and "e_prefab_file" property should have "!prefab_my_test" value in it.
    "e_pref_make_unique"                  (bool)   // By default Entity Prefaber loads objects without making any changes to them as they are inside the prefab file (this is a fast mode). However you can set this property to true and this will force Entity Prefab to replace any "{unique_id}" keyword in values of all loaded object properties with special unique string (this is a slow but powerful mode). This string will consist of 9 numbers and it will be different for each loaded instance of prefab, but it will be the same within all object properties of one loaded prefab. You can write "{unique_id}" in any values of objects properties that are of string type. E.g. you can have a prefab with Entity Light that has "e_name" with value "my_{unique_id}_name" and Entity Button that have "e_target" with value "my_{unique_id}_name". If you have loaded two instances of such a prefab (in different places, of course, by two Entity Prefab) then each Entity Button will activate only one Entity Light (which was created alongside with it button). The actual names and targets will be something like "my_000000001_name" for one pair of button and light, and "my_000000002_name" for the other pair.
    "e_pref_intances_load_offset_x"       (float)  // X offset of the loaded object instances (can work in both "e_relative_coordinates" = true and "e_relative_coordinates" = false).
    "e_pref_intances_load_offset_y"       (float)  // Y offset of the loaded object instances (can work in both "e_relative_coordinates" = true and "e_relative_coordinates" = false).
    "e_pref_intances_save_offset_x"       (float)  // X offset of the saved object instances (can work in both "e_relative_coordinates" = true and "e_relative_coordinates" = false).
    "e_pref_intances_save_offset_y"       (float)  // Y offset of the saved object instances (can work in both "e_relative_coordinates" = true and "e_relative_coordinates" = false).
    "e_pref_relative_coordinates"         (bool)   // If this value is true, then the coordinates of this Entity Prefaber will be the origin of the loaded prefab objects (E.g. an object with x=0 and y=10 inside the prefab file will be loaded at the same map x as the Entity Prefaber, but his map y will be 10 pixel lower than Entity Prefaber). If this value is false, then the loaded prefab objects will be at the same coordinates as they are inside the prefab file (e.g. an object with x=0 and y=10 inside the prefab file will be loaded on the map coordinates x=0 and y=10 despite the location of the Entity Prefaber).
    "e_pref_internal_storage"             (string) // This property contain prefab as json string that was been saved by using "e_pref_mode" = "3". You can manipulate this string on runtime, but you should avoid doing this when it contain big prefab, since it can result in performance impact.
    "e_destroy_self"                      (bool)   // If true, then Entity Prefab will delete itself after activation.
    "e_delayed_destroy_self"              (int)    // Amount of this prefaber activations before it set his "e_destroy_self" to true ("0" or lower to disable this feature). Helpful for example if you need to save prefab in to internal storage, but delete prefaber after it will load prefab back (i.e. "1" will allow prefaber to be activated two times before selfdestroys).

    "e_pref_mode" (MODE) {
        "0"       // Load everything from prefab file.
                  // For this mode it is recomended to place prefaber as Point in Tiled.
                  
        "1"       // Get all object instances of the types "e_pref_saved_types" which coordinates are in rectangle range of this Entity Prefaber and save them in to prefab file, if file already exists it will be overwriten.
                  // For this mode you need to place prefaber as Rectangle in Tiled.
                  // Also note prefaber CAN'T save game core objects (like obj_Cursor or obj_dev_gameconsole, etc) and managed objects (obj_doorwall, obj_cyclerwall and obj_cyclerwall_solid).
                  // Work of this mode is equal to how "level dump"/"level save"/"levels save all" commands saves objects (NOT "level dump full"/"level save full"/"levels save all full").
				  
        "2"       // Load everything that stored in internal prefaber storage.
                  // For this mode you can place prefaber as Point in Tiled, but in most cases you will need to place it as Rectangle, since "2" and "3" modes intended to be used together.
                  
        "3"       // Get all object instances of the types "e_pref_saved_types" which coordinates are in rectangle range of this Entity Prefaber and save them in to internal prefaber storage, existing internal storage will be overwriten.
                  // For this mode you need to place prefaber as Rectangle in Tiled.
                  // Also note prefaber CAN'T save game core objects (like obj_Cursor or obj_dev_gameconsole, etc) and managed objects (obj_doorwall, obj_cyclerwall and obj_cyclerwall_solid).
                  // Work of this mode is equal to how "level dump"/"level save"/"levels save all" commands saves objects (NOT "level dump full"/"level save full"/"levels save all full").
    }
	
    e_pref_saved_types (KEYWORDS) {
	// You can use this keywords instead of manually typing object types
        "!Entity"       // All types of entities
        "!Enemy"        // All types of regullar monsters and plus lanterns
        "!Item"         // All types of items
        "!Noone"        // Nothing, in case you need placeholder that didn't do anything
    }

//You can think about this entity as Entity Spawner but more powerful. Instead of manually defining properties of single spawned object in spawner, you create new map that will be a prefab (i.e. template/blueprint) for spawning all of it objects with all their properties. You can change prefab even when map is already started, but be aware that changing of prefab didn't change already loaded on map field prefab instances - they are just object instances without any connection between them and prefab. 
//The true power of this entity is that you can set "e_make_unique" to true and use "{unique_id}" in properties of the string type. This will guaranty that entities will work with each others in one instance of loaded prefab, but will ignore same entities from another loaded instance of the same prefab.
//Note, if for some reson you need to get/manipulate "{unique_id}", you can GET last string used for such replacement via "prefabers_unique_id_last" , and you can manipulate with it integer value via "prefabers_unique_id" global variable. But in most cases you don't need to change unique id since it is fully managed by game (nulling when new game started, incremented by one when prefab is loaded, and saved/loaded inside save file). What you can actually do - you can use "prefabers_unique_id_last" (it hold string) to connect some parts of the two prefabs together with some manually placed grabbers and calculators.
//Also note that first prefab with {unique_id} will have "000000001" as unique string, not "000000000" ("000000000" value is reserved as flag that there is no prefabs instantiated yet).
//Reusing of your entities mechanisms is not the only porpuse of this entity.
//This entity is pretty good for your own optimization. If you have map with thousands of entities you can devide it in to smaller parts and load/unload them while player progress through your map.
//And you can use it not only for optimization but for regular gameplay. For example you can use it to make the same room to be different in particullar moments of your map gameplay. Or you can spawn hundreds of monsters over the whole map by single prefaber. There is a ton of ideas you can come up with.

//Note about "!prefab" - such naming rule was been made to distinguish prefab files from the normal maps. Entity Prefaber will refuse to load files that don't have this prefix and the arcade menu will not read files that have this prefix.
//If for some reason you need to load prefab file as regular map you can do this by renaming+moving file or by creating a SYMBOLIC link to it. But it is advisable to use Entity Prefaber on normal map to test prefabs.

}

//-------------------- Entity Programmer (ent_programmer) --------------------//
{
    //@brief - Used when you need to program(write) value(stored in this entity) in to another entity.
    //@shape - always point
    
    "e_name"            (string)        // name of any object to program
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_disable"         (bool)          // deactivate entity after performing activation
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_prog_target"     (string)        // name of entity to program ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_prog_parm"       (string)        // parameter name to program (if "e_prog_target" has value, !Activate allowed)
    "e_prog_value"      (float)         // parameter value with float type to program (if "e_prog_parm" has value and "e_prog_string" has no value)
    "e_prog_string"     (string)        // parameter value with string type to program instead float (if "e_prog_parm" has value)
    "e_array_1st_dim"   (int)           // if e_prog_parm is the name of an array, you can access its first dimension using that index. (If set to -1 then the array write function is not used)
    "e_array_2nd_dim"   (int)           // if e_prog_parm is the name of an array, you can access its second dimension using that index. (If set to -1 then the array write function is not used)
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Randomizer (ent_randomizer) --------------------//
{
    //@brief - Used when you need to activate one random entity from some group of entities.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_targ0"           (string)        // name of entity that can be activated by current entity
    "e_targ1"           (string)        // name of entity that can be activated by current entity
    //...
    "e_targ8"           (string)        // name of entity that can be activated by current entity
    "e_targ9"           (string)        // name of entity that can be activated by current entity
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Reader (ent_reader) --------------------//
{
    //@brief - Used when you need to read content of the text file.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_read_file"       (string)        // text file name to read input value in
    "e_read_line"       (int)           // text line inside the file to read
    "e_read_string"     (bool)          // read whole text instead digits if "true", read only numbers and ignore other characters if "false"
    "e_output_target"   (string)        // name of entity to set output value in ("!Player" and "!Global" allowed, aslo allowed !Any if e_sort_method != 0)
    "e_output_parm"     (string)        // name of targeted entity parameter to set output value (if "e_output_target" have value, !Activate allowed)
    "e_output_string"   (bool)          // convert output value to string
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"

    //Note - in this entity "e_read_file" also have localization support.
    //You can read more about how it works in the notes for the Entity Dialogue.
}

//-------------------- Entity Rotating (ent_rotating) --------------------//
{
    //@brief - Used when you need decorative object that spins around it center. Have sprite, hitbox, and shadow. Also unlike Entity Decor this entity have <USE> interaction and can activate other entity.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start) (unlike Entity Decor determine whether sprite is rotating or not)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"   (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_color"    (color || int)  // current entity color
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_mask"            (string)        // collision mask for current entity
    "e_mask_ox"         (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"         (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"    (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_solid_type"      (int)           // sets collision for entity ("0" - no collision, "1" - projectiles can pass, "2" - full solid)
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_inspector"       (string)        // entity name that will be displayed on the inspector
    "e_shadow"          (bool)          // allow entity to cast a shadow
    "e_shadow_bot"      (bool)          // sets shadow to cast from bottom side
    "e_usedistance"     (int)           // current entity use distance (0 or lower to be not usable by player)
    "e_toggle"          (bool)          // current entity can be activated only by other entity
    "e_rot_speed"       (int)           // rotating speed with wich "e_sprite_angle" will change every tick (negative value will rotate sprite in other direction)
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
        //Note - this entity rotate only it sprite (i.e. mask did not rotating)
}

//-------------------- Entity Save (ent_save) --------------------//
{
    //@brief - Used when you need to trigger autosave or to show player a save menu.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_autosave"        (bool)          // autosave progress on activation
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_ignorehealth"    (bool)          // allows to activate current entity only if Player is alive (if "false")
}

//-------------------- Entity Sequencer (ent_sequencer) --------------------//
{
    //@brief - Used when you need to move something that DOES have AI (i.e. monsters, NPCs or Player). Can set to true/false sequence_enabled global variable. Can move camera (when sequence_enabled=true).
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_sequence"            (bool)          // allows to work in 'sequence mode'
    "e_sequence_on"         (bool)          // enable 'sequence mode' if "true", dissable if "false" (if "e_sequence" is "true") i.e. when you activate sequencer it will do `global.sequence_enabled = e_sequence_on;`
    "e_sequence_dur"        (int)           // disable 'sequence mode' in time if it's enabled (never if "-1", if "e_sequence" is "true")
    "e_sequence_off"        (bool)          // disable 'sequence mode' after sequence end (if "e_sequence" is "true")
    "e_sequence_stop_enemy" (bool)          // if "true" then on this sequencer activation command ALL regular monsters to stop walking (if "e_sequence" is "true")
    "e_slave_any"           (string)        // name of "obj_enemy_base" to work with (can be used to manipulate both monsters+NPCs+lanters)
    "e_slave_npc"           (string)        // name of NPC to work with
    "e_slave_monst"         (string)        // name of monster to work with
    "e_move_any"            (string)        // name of entity to move targeted "obj_enemy_base" on it (can be used to manipulate both monsters+NPCs+lanters)
    "e_move_npc"            (string)        // name of entity to move targeted NPC to it
    "e_move_npc_type"       (int)           // determine "e_slave_npc"'s speed ("0" - sneaking, "1" - walking,"2" - running, "3" - moving with "e_move_npc_spd" speed)
    "e_move_npc_spd"        (float)         // determine "e_slave_npc"'s speed (if "e_move_npc_type" equal to 3)
    "e_move_monst"          (string)        // name of entity to move targeted monster to it (also can be used to manipulate lanterns)
    "e_move_player"         (string)        // name of entity to move player to it (if 'sequence mode' is enabled)
    "e_move_player_type"    (int)           // sets player movement type ("0" - crawling, "1" - walking, "2" - running, "3" - teleporting, "4" - custom speed)
    "e_move_player_spd"     (float)         // sets player movement speed (if "e_move_player_type" == "4")
    "e_move_cam"            (string)        // name of entity to move camera to it (if 'sequence mode' is enabled)
    "e_move_cam_spd"        (int || float)  // camera movement speed (if "e_move_cam" isn't "undefined")
    "e_follow_cam"          (string)        // name of entity that will be followed by the camera (if 'sequence mode' is enabled, "!Player" & "!noone" allowed)
    "e_jump_any"            (string)        // name of entity to place targeted "obj_enemy_base" on it (can be used to manipulate both monsters+NPCs+lanters)
    "e_jump_npc"            (string)        // name of entity to place targeted NPC on it
    "e_jump_monst"          (string)        // name of entity to place targeted monster on it (also can be used to manipulate lanterns)
    "e_jump_player"         (string)        // name of entity to place player on it
    "e_jump_cam"            (string)        // name of entity to place camera on it (if 'sequence mode' is enabled)
    "e_jump_cam_smooth"     (bool)          // defines if camera will jump instantly (if "false") 
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_x_offset"       (int)           // x offset of "e_sort_radius"
    "e_sort_y_offset"       (int)           // y offset of "e_sort_radius"
    "e_progress"            (bool)          // Sequencer progress state. Do not change it manually! You need to activate sequencer to properly start/stop it.
        // Note - "e_sort_tag", "e_sort_type", "e_sort_position" and "e_sort_radius" have limited functional in this entity!
        // We not yet implemented e_second_sort_* for this entity, thus it is recomended to avoid usage of non-0 "e_sort_method" in this entity!
        // Please use "Entity Movement" if you need to move sorted out non-AI objects.
        // But if for some reason you need to move sorted out Monsters or NPCs you can always do such trick - sort out and rename needed Monsters/NPCs with "Entity Programmer", after that you can move them with "Entity Sequencer" in "e_sort_method"==0 (this is UGLY solution, but it will work for now and in the future updates too).
        // Sorry for inconvenience, but we need to do a hellish refactoring to fit e_second_sort_* in to this entity ._.
}

//-------------------- Entity Sound (ent_sound) --------------------//
{
    //@brief - Used when you need to play mono sound (i.e. same 100% strength from both left and right speakers/headphones no matter what).
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // sound to play on entity activation (quiet if "sound_NULL")
    "e_sound_fadedown"  (int)           // If greater than 0 then the sound will fade down to zero volume over "e_sound_fadedown" milliseconds after this entity is activated while it working
    "e_sound_fadeup"    (int)           // If greater than 0 then the sound will fade up to full volume over "e_sound_fadedown" milliseconds after this entity is activated while it is not working
    "e_sound_loop"      (bool)          // repeat sound until deactivation
    "e_sound_type"      (int)           // defines sound type for volume options ("0" - sound, "1" - music, "2" - voice)
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Sound 3D (ent_sound_3d) --------------------//
{
    //@brief - Used when you need to play stereo sound, strength depend on distance between this entity and player (i.e. strength of left and right speaker/headphone depend on which side from entity player are).
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // sound to play on entity activation (quiet if "sound_NULL")
    "e_sound_loop"      (bool)          // repeat sound until deactivation
    "e_sound_type"      (int)           // defines sound type for volume options ("0" - sound, "1" - music, "2" - voice)
    "e_falloff_ref"     (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"    (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"  (int)           // the falloff factor (default "1")
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Spawner (ent_spawner) --------------------//
{
    //@brief - Used when you need to create objects on game field in the runtime.
    //@shape - always point
    
    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_refresh"             (int)           // entity refresh (never if "-1", "30" means 1 second). After activation enity will count down this amount of time. While counting down it will ignore any incoming activations (don't spawn anything and don't activate it e_target).
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_spawn"               (string)        // object to spawn on activation
    "e_set_dir"             (int || string) // spawned object direction (anti-clockwise, 0 = right, object "e_name" or "!Player" if string)
    "e_set_dmg"             (int)           // spawned object damage (if spawned object is projectile)
    "e_set_drop"            (string)        // if spawned object is monster or NPC then it will spawn object when die
    "e_set_name"            (string)        // set "e_name" for spawned entity (also all monsters, "obj_Thunder", "obj_explosion")
    "e_set_tag"             (string)        // set "e_tag" for spawned entity (also all monsters, "obj_Thunder", "obj_explosion")
    "e_set_target"          (string)        // set "e_target" for spawned entity (also all monsters, "obj_Thunder", "obj_explosion")
    "e_set_spawn"           (string)        // set "e_spawn" for spawned entity (works if spawned entity is another Spawner)
    "e_fx"                  (bool)          // special particle effect
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_set_parameters"      (bool)          // allows to set up to 10 float and 10 string custom parameters for spawned object
    
    "e_set_parm_01"         (string)        // name of spawned object parameter to set (if "e_set_parameters" is "true")
    "e_set_parm_02"         (string)        // name of spawned object parameter to set (if "e_set_parameters" is "true")
    //...
    "e_set_parm_19"         (string)        // name of spawned object parameter to set (if "e_set_parameters" is "true")
    "e_set_parm_20"         (string)        // name of spawned object parameter to set (if "e_set_parameters" is "true")
    
    "e_set_value_01"        (float)         // float value to set into parameter, defined in "e_set_parm_01" (if "e_set_parameters" is "true")
    "e_set_value_02"        (float)         // float value to set into parameter, defined in "e_set_parm_02" (if "e_set_parameters" is "true")
    //..
    "e_set_value_09"        (float)         // float value to set into parameter, defined in "e_set_parm_09" (if "e_set_parameters" is "true")
    "e_set_value_10"        (float)         // float value to set into parameter, defined in "e_set_parm_10" (if "e_set_parameters" is "true")
    
    "e_set_value_11"        (string)        // string value to set into parameter, defined in "e_set_parm_11" (if "e_set_parameters" is "true")
    "e_set_value_12"        (string)        // string value to set into parameter, defined in "e_set_parm_12" (if "e_set_parameters" is "true")
    //...
    "e_set_value_19"        (string)        // string value to set into parameter, defined in "e_set_parm_19" (if "e_set_parameters" is "true")
    "e_set_value_20"        (string)        // string value to set into parameter, defined in "e_set_parm_20" (if "e_set_parameters" is "true")
    
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Switch (ent_switch) --------------------//
{
    //@brief - Used when you need same functional as Entity Button, but also with the ability to activate two different entities every odd/even time the player uses this Entity Switch (or when it activated by other entity). 
    //@shape - always point

    "e_name"                (string)        // current entity name
    "e_tag"                 (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"              (string)        // name of entity that current entity will activate everytime (if e_sort_method isn't 0 then "!Any" allowed)
    "e_target_on"           (string)        // name of entity that current entity will activate every odd numbered time (if e_sort_method isn't 0 then "!Any" allowed)
    "e_target_off"          (string)        // name of entity that current entity will activate every even numbered time (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"               (int)           // delay before activation ("30" means 1 second)
    "e_refresh"             (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sprite"              (string)        // current entity sprite
    "e_sprite_remback"      (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"       (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"           (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"           (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"       (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"       (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"        (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_image"        (int)           // current entity sprite frame (do not use this)
    "e_sprite_color"        (color || int)  // current entity color
    "e_mask"                (string)        // collision mask for current entity
    "e_mask_ox"             (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"             (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"        (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_sound"               (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"           (bool)          // current entity activation ("true" if must activate on start)
    "e_depth"               (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_usedistance"         (int)           // current entity use distance
    "e_block"               (bool)          // blocks current entity until refresh
    "e_toggle"              (bool)          // entity can be activated only by other entity
    "e_shooter"             (bool)          // can be activated by shooting
    "e_allowmonsters"       (bool)          // allows monsters to activate entity
    "e_allownpc"            (bool)          // allows NPC to activate entity
    "e_allowplayer"         (bool)          // allows player to activate entity
    "e_allowtele"           (bool)          // allows teleportation ball to activate entity
    "e_collision"           (bool)          // destroy projectiles on collision (if "e_shooter" is "true")
    "e_collied_only_ranged" (bool)          // if false then melee projectiles can simultaneously activate entity and hit nearby monster before been marked as "collieded" (if "e_collision" is "true" and "e_shooter" is "true")
    "e_inspector"           (string)        // entity name that will be displayed on the inspector
    "e_falloff_ref"         (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"        (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"      (int)           // the falloff factor (default "1")
    "e_sort_method"         (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"            (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"           (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"       (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"         (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"             (int)           // x offset of "e_sort_radius"
    "e_sort_oy"             (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Trigger (ent_trigger) --------------------//
{
    //@brief - Used when you need to detect collision(intersection) between this entity and player/monster/npc/(or specific object type) and if it happened, activate other entity.
    //@shape - always rectangular
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_refresh"         (int)           // entity refresh (never if "-1", "30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_allowmonsters"   (bool)          // allows monsters to activate entity
    "e_allownpc"        (bool)          // allows NPC to activate entity
    "e_allowcustom"     (string)        // allows specified object to activate entity (for example try "obj_Fireball" or "Monster Wandering")
    "e_trigger_mode"    (int)           // determine at what point e_target will be activated
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
    
    "e_trigger_mode" (MODES) {
        "0"     // Activate if allowed object is inside the trigger zone (once per "e_refresh" amount of ticks)
        "1"     // Activate if allowed object is outside the trigger zone (once per "e_refresh" amount of ticks)
        "2"     // Activate only at the moment when allowed object enters the trigger zone (provided that the trigger has already been updated after counting "e_refresh" ticks)
        "3"     // Activate only at the moment when allowed object leaves the trigger zone (provided that the trigger has already been updated after counting "e_refresh" ticks)
                // Note, that mode "1" is untriggerable in the one first tick. Mode "2" and "3" are untriggerable even in two first ticks. (after level start or loading the game)
    }
}

//-------------------- Entity Waypoint (ent_waypoint) --------------------//
{
    //@brief - Used when you need to create paths for "Entity Sequencer" and "Entity Movement". Unlike "Entity Node" this entity have "e_next" which is used by sequencer/movement when they move somethig along path of waypoints.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_next"            (string)        // next waypoint name ("" means that this waypoint is a end of path). Can also point to another non-waypoint entity, in this case such entity will be the end of path (unless you program "e_next" for non-waypoint entity, but please, avoid doing this, since non-waypoint entities DON'T save "e_next" in to save file!)
}

//-------------------- Entity Window (ent_window) --------------------//
{
    //@shape - always point

    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_target"          (string)        // name of entity that current entity will activate (if e_sort_method isn't 0 then "!Any" allowed)
    "e_delay"           (int)           // delay before activation ("30" means 1 second)
    "e_sound"           (string)        // activation sound (quiet if "sound_NULL")
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_sprite"          (string)        // current entity sprite
    "e_sprite_remback"  (bool)          // makes all pixels with the sprite background color (left-bottom pixel) transparent (if "e_sprite" is external)
    "e_sprite_smooth"   (bool)          // smooth the sprite edges (if "e_sprite_remback" is "true")
    "e_sprite_ox"       (int)           // sprite X origin (if "e_sprite" is external)
    "e_sprite_oy"       (int)           // sprite Y origin (if "e_sprite" is external)
    "e_sprite_xscale"   (float)         // sprite X scale ("1" is default)
    "e_sprite_yscale"   (float)         // sprite Y scale ("1" is default)
    "e_sprite_angle"    (int)           // sprite angle (anti-clockwise, "0" is default)
    "e_sprite_frames"   (int)           // number of images in current sprite
    "e_sprite_image"    (int)           // current entity sprite frame (do not use this)
    "e_sprite_anim"     (float)         // animation speed
    "e_sprite_color"    (color || int)  // current entity color
    "e_mask"            (string)        // collision mask for current entity
    "e_mask_ox"         (int)           // mask X origin (if "e_mask" is external)
    "e_mask_oy"         (int)           // mask Y origin (if "e_mask" is external)
    "e_mask_remback"    (bool)          // makes all pixels with the mask background color (left-bottom pixel) transparent (if "e_mask" is external)
    "e_depth"           (int)           // Current entity depth. By default (if e_depth is UNDEFINED in Tiled - i.e. like when you pressed Delete with e_depth selected) entities set their e_depth to "-y" when they are created. Unlike the "depth" of the regular object , the e_depth of entities does not change on every tick. This allows you to easily manipulate e_depth in TIled and even at runtime. e_depth determines the drawing order - objects/entities/layers with higher e_depth are drawn "behind" objects/entities/layers with lower e_depth.
    "e_falloff_ref"     (int)           // the falloff reference relative to the listener (clamp)
    "e_falloff_dist"    (int)           // the maximum falloff distance relative to the listener
    "e_falloff_factor"  (int)           // the falloff factor (default "1")
    "e_sort_method"     (int)           // "0" (used by default) - all entities specified in "e_target", below sort parametrs are ignored, "1" - one nearest entity on "e_sort_position" that match all not empty sorts, "2" - one furthest entity on "e_sort_position" that match all not empty sorts, "3" - "e_sort_position" nearest entities that match all not empty sorts, "4" - "e_sort_position" furthest entities that match all not empty sorts, "5" - "e_sort_position" some (random) entities that match all not empty sorts.
    "e_sort_tag"        (string)        // you can add unique tag for entity and find it by this tag ("!Any" allowed)
    "e_sort_type"       (string)        // you can find entity by it's type , like "ent_button", "ent_spawner", etc ("!Entity" allowed) . Also note that this is the only sort parameter that truly decrease CPU load caused by sort algorithm.
    "e_sort_position"   (int)           // number of entity in order (if "e_sort_method" is "1" or "2") OR count of entities (if "e_sort_method" is "3" or "4" or "5")
    "e_sort_radius"     (int)           // you can find entity in specified radius (or outside it if "e_sort_radius" less than or equel "0")
    "e_sort_ox"         (int)           // x offset of "e_sort_radius"
    "e_sort_oy"         (int)           // y offset of "e_sort_radius"
}

//-------------------- Entity Writer (ent_writer) --------------------//
{
    //@brief - Used when you need to write value(stored in this entity) in to text file.
    //@shape - always point
    
    "e_name"            (string)        // current entity name
    "e_tag"             (string)        // Second name of entity. Helpful if you need to chose certain entity from many that have the same name and types.
    "e_activated"       (bool)          // current entity activation ("true" if must activate on start)
    "e_write_input"     (any)           // any value to write in the text file
    "e_write_file"      (string)        // text file name to write input value in
    "e_write_line"      (int)           // text line inside the file to write
}

//===================================================================================================//
//---------------------------------------- Other parameters: ----------------------------------------//
//===================================================================================================//

                                ////Player////
{
    "e_sprite"                  (string)        // player custom sprite
    "e_player_male"             (bool)          // player voice (female if "false")
    "telefraged"                (bool)          // checks if player already died by self-telefragging
}

                                ////Monsters and NPCs////
{
    "e_name"                    (string)        // monster name
    "e_tag"                     (string)        // Second name of monster. Helpful if you need to chose certain monster from many that have the same name and types.
    "e_target"                  (string)        // name of entity that will be activated after death
    "drop"                      (string)        // object to drop after death
    "e_fx"                      (bool)          // special particle effect when monster/npc droped item
}

                                ////Items And Keys////
{
    "e_name"                (string)        // item/key name
    "e_tag"                 (string)        // Second name of item/key. Helpful if you need to chose certain item/key from many that have the same name and type.
    "e_target"              (string)        // name of entity that will be activated after picking up
}

                                ////constants names////
{
    "score_time"
    "score_level"
    "score_level_lantern"
    "score_kill"
    "score_gib"
    "score_explosed"
    "score_melee"
    "score_shaft"
    "score_telefrag"
    "score_sorcery_save"
    "score_sorcery_destroy"
    "score_key"
    "score_item"
    "score_personality"
    "score_map"
    "score_weapon"
    "score_modifier"
    "score_rune"
    "score_death"
    "score_damage"
    "score_panic"
    "score_save"
    "score_sacrifice"
    "score_cheat"
    "score_secret"
    "c_darkBlue"
    "c_darkGreen"
    "c_darkRed"
    "c_lilac"
    "c_darkAqua"
    "c_blood"
    "c_spookyOrange"
    "c_spookyGreen"
    "c_dismas"
    "c_gestas"
    "c_claudia"
    "c_phantom"
    "c_industOrange"
    "c_halfblue"
    "c_copper"
    "c_steel"
    "c_brass"
    "c_flare"
    "c_vision"
    "c_candle"
    "c_fire"
    "c_warmLamp"
    "c_abelLamp"
    "c_demonic"
    "c_streetLight"
    "c_lampIndust"
    "c_torch"
    "c_ltmap_lanterns"
    "c_ltmap_pandemonium"
    "c_ltmap_cave"
    "c_ltmap_night"
    "c_ltmap_moonlight"
    "c_ltmap_daylight"
    "c_ltmap_sunset"
    "c_ltmap_heaven"
    "c_spell_sorcery"
    "c_spell_teleport"
    "c_spell_shaft"
    "c_spell_plasma"
    "c_spell_fireball"
    "c_spell_melee"
    "monster_wandering_hp"
    "monster_wandering_speed"
    "monster_wandering_damage"
    "monster_wandering_vdistance"
    "monster_wandering_forget"
    "monster_wandering_fov"
    "monster_lantern_speed"
    "monster_lantern_damage"
    "monster_lantern_light"
    "monster_lantern_eye"
    "monster_lantern_range"
    "monster_lantern_radred"
    "monster_lantern_radyellow"
    "monster_lantern_radblue"
    "monster_lantern_radnoone"
    "lanterns_max_limit"
    "monster_horror_hp"
    "monster_horror_speed"
    "monster_horror_hdamage"
    "monster_horror_adamage"
    "monster_horror_vdistance"
    "monster_horror_forget"
    "monster_horror_eye"
    "monster_horror_fov"
    "monster_howling_hp"
    "monster_howling_speed"
    "monster_howling_vdistance"
    "monster_howling_forget"
    "monster_howling_fov"
    "monster_impendent_hp"
    "monster_impendent_speed"
    "monster_impendent_damage"
    "monster_impendent_vdistance"
    "monster_impendent_forget"
    "monster_impendent_fov"
    "monster_nightmare_hp"
    "monster_nightmare_speed"
    "monster_nightmare_damage"
    "monster_nightmare_vdistance"
    "monster_nightmare_forget"
    "monster_nightmare_fov"
    "monster_nightmarish_hp"
    "monster_nightmarish_speed"
    "monster_nightmarish_damage"
    "monster_nightmarish_vdistance"
    "monster_nightmarish_eye"
    "monster_nightmarish_hook_speed"
    "monster_nightmarish_hook_damage"
    "monster_nightmarish_pike_speed"
    "monster_nightmarish_pike_damage"
    "monster_nightmarish_forget"
    "monster_nightmarish_fov"
    "monster_exhausted_hp"
    "monster_exhausted_speed"
    "monster_lost_hp"
    "monster_lost_vdistance"
    "monster_lost_eye"
    "monster_phantom_hp"
    "monster_phantom_damage"
    "monster_phantom_speed"
    "monster_phantom_light"
    "monster_phantom_radius"
    "monster_flyingwraith_hp"
    "monster_flyingwraith_speed"
    "monster_flyingwraith_vdistance"
    "monster_flyingwraith_forget"
    "monster_flyingwraith_fov"
    "monster_wraith_hp"
    "monster_wraith_speed"
    "monster_wraith_damage"
    "monster_wraith_vdistance"
    "monster_wraith_forget"
    "monster_wraith_fov"
    "monster_snowman_hp"
    "monster_snowman_dmg"
    "monster_snowman_speed"
    "monster_snowman_vdistance"
    "monster_snowman_attack_rate"
    "monster_spawn_speed"
    "player_speed_sneak"
    "player_speed_walk"
    "player_speed_run"
    "player_speed_teleport"
    "player_speed_panic"
    "player_precovery_timer"
    "player_frecovery_timer"
    "player_mrecovery_timer"
    "player_maniac_damage"
    "player_maniacHP"
    "player_panic_times"
    "player_panic_timer"
    "player_talk_chance"
    "soul_damage"
    "soul_recovery"
    "soul_recovery_fear"
    "soul_recovery_maniac"
    "soul_sorcery_time"
    "scripted_timers_number"
    "sacrifice_cost"
    "npc_speed_sneak"
    "npc_speed_walk"
    "npc_speed_run"
    "bandage_hp"
    "medkit_hp"
    "medkit_poison"
    "plant_hp"
    "plant_poison"
    "megahealth_fear_recovery"
    "megahealth_poison_recovery"
    "megahealth_health_recovery"
    "quad_time"
    "protection_time"
    "vision_time"
    "nuke_time"
    "fireball_speed"
    "teleball_speed"
    "plasmaball_speed"
    "plasmaball_damage"
    "plasmaball_accuracy"
    "shaft_speed"
    "shaft_damage"
    "shaft_radius"
    "slime_speed"
    "slime_damage"
    "spike_speed"
    "spike_damage"
    "needleDamage"
    "friend_damage_gibbed"
    "friend_damage_death"
    "gibs_count_gibbed"
    "gibs_count_telefraged"
    "gibs_speed_degrease"
    "personal_ball_speed"
    "personal_ball_recover"
    "personal_item_count"
    "personal_item_recover"
    "personal_darkness_count"
    "personal_god_time"
    "explosion_damage"
    "explosion_radius"
    "explosion_parts"
    "dialogue_adv_page_num"
    "dialogue_adv_option_num"
    "nc_dist"
    "christmas_time"

    "playerDeath.sanity"
	"playerDeath.toxin"
	"playerDeath.physical"
	"murdered.no"
	"murdered.killed"
	"murdered.torn"
	"murdered.blown"
	"language.English"
	"language.Russian"
	"language.sChinese"
	"language.tChinese"
	"language.French"
	"language.Belarusian"
	"language.Polish"
	"language.Ukrainian"
	"language.German"
	"language.Hungarian"
	"language.Czech"
	"language.Spanish"
	"npcstate.idle"
	"npcstate.walking"
	"npcstate.sneaking"
	"npcstate.running"
	"npcstate.following"
	"npcstate.seating"
}

                                ////global variables////
{
    "unload_entities"           (bool)          // (false by default) all entities loaded if "false", entities that are in the visible range and in range of %PrettyName% (ent_forceload) will be loaded (you can manually manage entities load on CPU) if "true"
    "last_console_command"      (string)        // last executed console command, on level start initialized with empty string
    
    "prefabers_unique_id_last"  (string)        // string that used to instantiate last prefab, also if equal to "000000000" then no prefabs are instantiated on map yet (read only)
    "prefabers_unique_id"       (int)           // number that is used to create "prefabers_unique_id_last" string

    "player_sanity"             (float)         // player sanity
    "player_toxin"              (float)         // player toxins
    "player_health"             (float)         // player health
    "player_maniac_score"       (float)         // player maniac points
    "player_infected"           (bool)          // player infection state
    "player_teleport"           (bool)          // player teleportation
    "player_allowcombat"        (bool)          // allow player to fight
    "player_allowflashlight"    (bool)          // allow player to use flashlight

    "inventory_key_steel"       (bool)          // player has the steel (blue) key if "true"
    "inventory_key_brass"       (bool)          // player has the brass (yellow) key if "true"
    "inventory_key_copper"      (bool)          // player has the commer (red) key if "true"
    "inventory_map"             (bool)          // player can use map if "true"
    "inventory_map_score"       (bool)          // sacrifices count (5 max)
    "inventory_melee"           (bool)          // Player can use melee weapons if "true"
    "inventory_fireball"        (bool)          // Player can use Fireball spell if "true"
    "inventory_plasma"          (bool)          // Player can use Plasma spell if "true"
    "inventory_sorcery"         (int)           // number of Sorcery spell charges
    "inventory_shaft"           (int)           // number of Shaft spell charges
    "inventory_teleport"        (bool)          // Player can use Teleport spell if "true"

    "stats_kills"               (int)           // player kills on the level
    "stats_items"               (int)           // player item pickups on the level
    "stats_secrets"             (int)           // secrets found on the level
    "stats_seconds"             (int)           // wasted seconds on the current level (read only)
    "stats_minutes"             (int)           // wasted minutes on the current level (read only)
    "stats_kills_goal"          (int)           // kills goal on the level
    "stats_items_goal"          (int)           // items goal on the level
    "stats_secrets_goal"        (int)           // secrets goal on the level
    "stats_kills_total"         (int)           // kills total
    "stats_items_total"         (int)           // items found total
    "stats_secrets_total"       (int)           // secrets found total
    "stats_seconds_total"       (int)           // wasted seconds total (read only)
    "stats_minutes_total"       (int)           // wasted minutes total (read only)
    "stats_hours_total"         (int)           // wasted hours total (read only)
    "stats_time"                (float)         // real timer of wasted time on the current level, mesuared in ticks (one tick is 1/30 of a second)
    "stats_time_total"          (float)         // real timer of wasted total time, mesuared in ticks (one tick is 1/30 of a second)
    "stats_soulsave_total"      (int)           // souls saved total
    "stats_soulkill_total"      (int)           // souls destroyed total

    "arcade_score"              (int)           // player score in arcade mode
    "developer"                 (bool)          // developer mode if "true"
    "cheat_godmode"             (bool)          // makes player invincible if "true"
    "cheat_noclip"              (bool)          // no wall collision for player if "true"
    "cheat_notarget"            (bool)          // disable monsters AI if "true"
    "difficulty"                (int)           // game difficulty (0 to 4)    
    "pain_start"                (bool)          // plays player pain effect if "true"
    "collect_alpha"             (float)         // plays picking item effect if > "0" ("0.25" is default)
    "flashlight"                (bool)          // enable or disable the flashlight
    "flashlight_flick"          (float)         // flashlight flickering if > "0"
    "gui_hud"                   (bool)          // defines HUD visibility
    "gui_cursor"                (bool)          // defines Cursor visibility
    "interaction"               (bool)          // presses <USE> button if "true"
    "game_outside_frame"        (bool)          // draw background frame outside game window
    "sequence_enabled"          (bool)          // enables sequence mode if "true"
    "arcade_finish"             (bool)          // Defines if player has finished his run in the arcade mode

    "gamemode_deathrun"         (int)           // deathrun lap
    "gamemode_randomrun"        (bool)          // enables random run if "true"
    "gamemode_lanterns"         (bool)          // enables lantern invasion if "true"

    "level_music"               (bool)          // plays arcade music on the level if "true"
    "level_lantern"             (bool)          // enables lantern level type if "true"
    "level_lantern_allowed"     (bool)          // defines if it's possible to enable Lanterns mode on the level
    "level_lightmap"            (color)         // level environment color

    "rune_quad"                 (bool)          // gives quad rune if "true"
    "rune_protection"           (bool)          // gives protection rune if "true"
    "rune_vision"               (bool)          // gives vision rune if "true"
    "rune_nuke"                 (bool)          // gives ??? rune if "true"
    "sorcery_progress"          (bool)          // enable sorcery mode 
   
    "current_spell"             (int)           // current spell
    "mod_fireball_current"      (int)           // current Fireball modifier
    "mod_plasma_current"        (int)           // current Plasma modifier
    "mod_teleport_current"      (int)           // current Teleport modifier
    "mod_melee_current"         (int)           // current melee weapon

    "powerup_knife"             (int)           // knife damage multiplier (increases each time the player get a second and subsequent knifes)
    "powerup_needles"           (int)           // needles damage multiplier (increases each time the player get a second and subsequent needles)
    "powerup_wrench"            (int)           // wrench damage multiplier (increases each time the player get a second and subsequent wrenches)
    "powerup_fireball"          (int)           // fireball damage multiplier (increases each time the player get a fourth and subsequent fireballs)
    "powerup_plasma"            (int)           // plasma damage multiplier (increases each time the player get a fourth and subsequent plasma)
}
