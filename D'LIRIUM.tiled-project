{
    "automappingRulesFile": "",
    "commands": [
    ],
    "extensionsPath": "./scripts",
    "folders": [
    ],
    "objectTypesFile": "./D'LIRIUM Object Types (Updated 2023-10-25).JSON",
    "propertyTypes": [
        {
            "id": 1,
            "name": "Blending",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Normal",
                "Additive",
                "Subtract",
                "Multiply",
                "Max"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 2,
            "name": "Calculation Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "A + B",
                "A - B",
                "A * B",
                "A / B",
                "A div B",
                "A mod B",
                "sqr{A}",
                "sqrt{A}",
                "power{A} B times",
                "logn{A} n = B",
                "power{e} A times",
                "ln{A}",
                "log2{A}",
                "log10{A}",
                "frac{A}",
                "round{A}",
                "floor{A}",
                "ceil{A}",
                "abs{A}",
                "int rng from A to B",
                "float rng from A to B",
                "is A are + or - or 0",
                "get max A or B",
                "get min A or B",
                "get mean A and B",
                "get timer",
                "degrees A to radians",
                "radians A to degrees",
                "sin{A rad}        return rad",
                "cos{A rad}        return rad",
                "tan{A rad}        return rad",
                "arcsin{A rad}     return rad",
                "arccos{A rad}     return rad",
                "arctan{A rad}     return rad",
                "arctan of 2 sides return rad",
                "dsin{A deg}       return rad",
                "dcos{A deg}       return rad",
                "dtan{A deg}       return rad",
                "darcsin{A rad}    return deg",
                "darccos{A rad}    return deg",
                "darctan{A rad}    return deg",
                "arctan of 2 sides return deg",
                "distance from here to x=A,y=B",
                "angle between here and x=A,y=B",
                "angle difference",
                "component_x",
                "component_y",
                "num from str A",
                "rough num from A str",
                "num A to str with B amoun frac part",
                "concatenate str A + str B",
                "count appears of str B in str A",
                "get symbols at B in str A",
                "remove symbols at B from str A",
                "get B symbols from begin of str A",
                "get B symbols from end of str A",
                "remove B symbols from begin of str A",
                "remove B symbols from end of str A",
                "find pos of first str B in str A",
                "find pos of last str B in str A",
                "remove all non let from str A",
                "remove all non let+dig from str A",
                "number of symbols in str A",
                "remove first str B from str A",
                "remove last str B from str A",
                "remove all str B from str A",
                "str A to upercase",
                "str A to lowercase",
                "power_string{A} B times",
                "(Debug) typeof A",
                "BIN to INT",
                "INT to BIN",
                "HEX to INT",
                "INT to HEX",
                "HEX to BIN",
                "BIN to HEX",
                "GAME int color to RGB str color",
                "RGB str color to GAME int color",
                "bits A AND bits B",
                "bits A OR bits B",
                "bits A XOR bits B",
                "bits shift A << B",
                "bits shift A >> B"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 3,
            "name": "Comparison Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "A == B",
                "A < B",
                "A > B",
                "A <= B",
                "A >= B",
                "A != B",
                "A && B",
                "A || B",
                "A ^^ B",
                "!A"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 4,
            "name": "Damage Type",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Physical",
                "Psychic",
                "Toxic"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 5,
            "name": "Draw Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Depending \"e_depth\"",
                "Above Level",
                "Above Screen",
                "Above GUI"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 6,
            "name": "Entity Sorting Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "No Sorting",
                "Single Nearest",
                "Single Furthest",
                "Many Nearest",
                "Many Furthest",
                "Many Random"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 7,
            "name": "Glare Sprite",
            "storageType": "string",
            "type": "enum",
            "values": [
                "",
                "spr_glow_lights",
                "spr_glow_items",
                "spr_glow_projectiles",
                "spr_glow_fire"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 8,
            "name": "Interaction Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Loop, Activate on end",
                "Play once, Activate on end",
                "Play once, Activate and Block on end",
                "Play once, Activate on start and end",
                "Play once, Activate on start and end, Block on end",
                "Loop reverse, Activate on end",
                "Play reverse, Activate on end",
                "Play reverse, Activate and Block on end",
                "Play reverse, Activate on start and end",
                "Play reverse, Activate on start and end, Block on end",
                "Play once, Activate on end; Play reverse, Activate on end",
                "Play once, Activate on end; Play reverse",
                "Play once; Play reverse, Activate on end",
                "Go to next frame, Activate on end",
                "Go to next frame, Activate and Block on end",
                "Go to previous frame, Activate on end",
                "Go to previous frame, Activate and Block on end"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 9,
            "name": "Fog Movement Direction",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Right",
                "Up",
                "Left",
                "Down"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 10,
            "name": "Movement Method",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Move to \"e_move_target\"",
                "Move to \"e_move_target\" avoiding obstacles",
                "Directional movement"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 11,
            "name": "Required Key",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Not Required",
                "Steel Key",
                "Brass Key",
                "Copper Key",
                "Custom Key"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 12,
            "name": "Solid Type",
            "storageType": "int",
            "type": "enum",
            "values": [
                "No Collision",
                "Projectiles Can Pass",
                "Full Solid"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 13,
            "name": "Text Style",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Default",
                "Small Font",
                "Classic Font",
                "Simplified Font",
                "Font Disabled"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 14,
            "name": "Sound Type",
            "storageType": "int",
            "type": "enum",
            "values": [
                "General",
                "Music",
                "Voice"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 15,
            "name": "Trigger Mode",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Activate Inside",
                "Activate Outside",
                "Activate on Enter",
                "Activate on Leave"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 16,
            "name": "Prefaber Mode",
            "storageType": "int",
            "type": "enum",
            "values": [
                "Load EVERYTHING from prefab file",
                "Save (types) into prefab file",
                "Load EVERYTHING from internal storage",
                "Save (types) into internal storage"
            ],
            "valuesAsFlags": false
        },
        {
            "id": 17,
            "name": "Entity Use Type",
            "storageType": "int",
            "type": "enum",
            "values": [
                "common",
                "inspect",
                "talk",
                "pick up",
                "save",
                "sorcery",
                "gift",
                "door",
                "button press",
                "search",
                "use",
                "nothing"
            ],
            "valuesAsFlags": false
        }
    ]
}
